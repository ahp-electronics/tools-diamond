<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >

<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<MDRDelay value="MDR_DELAY"/>
	<Instruction>
		EXTEST	 			= 0x15;
		EXTEST_PULSE        = 0x2D;
		EXTEST_TRAIN        = 0x2E;
		INTEST              = 0x2C;
		CLAMP               = 0x78;
		HIGHZ               = 0x18;
		LSC_PRELOAD         = 0x1C;             
		LSC_SAMPLE          = 0x1C;									
		BYPASS              = 0xFF;
		IDCODE_PUB          = 0xE0;
		LSC_UIDCODE_PUB     = 0x19;
		USERCODE            = 0xC0;
		LSC_READ_TEMP       = 0xE8;
		LSC_DEVICE_CTRL     = 0x7D;
		LSC_READ_STATUS0    = 0x3C;
		LSC_READ_STATUS1    = 0x3D;
		LSC_CHECK_BUSY      = 0xF0;
		LSC_REFRESH         = 0x79;
		LSC_I2CI_CRBR_WT    = 0x9C;
		LSC_I2CI_TXDR_WT    = 0x9D;
		LSC_I2CI_RXDR_RD    = 0x9E;
		LSC_I2CI_SR_RD      = 0x9F;
		LSC_IP_A            = 0x32;
		LSC_IP_B            = 0x38;
		LSC_IPTEST_A        = 0x33;
		LSC_IPTEST_B        = 0x39;
		LSC_PROG_SPI        = 0x3A;
		LSC_PROG_SPI1       = 0x3E;
		LSC_IDCODE_PRV      = 0x16;
		LSC_READ_PES        = 0x11;
		LSC_MANUFACTURE_SHIFT = 0x90;
		ISC_ENABLE          = 0xC6;
		LSC_ENABLE_X        = 0x74;
		ISC_DISABLE         = 0x26;
		ISC_PROGRAM         = 0x67;
		ISC_NOOP            = 0x30;
		ISC_PROGRAM_USERCODE = 0xC2;
		ISC_READ            = 0x80;
		ISC_ERASE           = 0x0E;
		ISC_DISCHARGE       = 0x14;
		ISC_PROGRAM_DONE    = 0x5E;
		ISC_ERASE_DONE      = 0x24;
		ISC_PROGRAM_SECURITY = 0xCE;
		LSC_PROGRAM_SECPLUS = 0xCF;
		ISC_DATA_SHIFT      = 0x05;
		ISC_ADDRESS_SHIFT   = 0x42;
		LSC_INIT_ADDRESS    = 0x46;
		LSC_WRITE_ADDRESS   = 0xB4;
		LSC_PROG_INCR       = 0x82;
		LSC_PROG_INCR_ENC   = 0xB6;
		LSC_PROG_INCR_CMP   = 0xB8;
		LSC_PROG_INCR_CNE   = 0xBA;
		LSC_READ_INCR       = 0x6A;
		LSC_PROG_CTRL0      = 0x22;
		LSC_READ_CTRL0      = 0x20;
		LSC_RESET_CRC       = 0x3B;
		LSC_READ_CRC        = 0x60;
		LSC_PROG_SED_CRC    = 0xA2;
		LSC_READ_SED_CRC    = 0xA4;
		LSC_SHIFT_PASSWORD  = 0xBC;
		LSC_PROG_PASSWORD   = 0xF1;
		LSC_READ_PASSWORD   = 0xF2;
		LSC_PROG_FEATURE    = 0xE4;          
		LSC_READ_FEATURE    = 0xE7;      
		LSC_PROG_FEABITS    = 0xF8;
		LSC_READ_FEABITS    = 0xFB;
		LSC_WRITE_COMP_DIC  = 0x02;
		LSC_WRITE_BUS_ADDR  = 0xF6;
		LSC_PCS_WRITE       = 0x72;
		LSC_PCS_READ        = 0xF7;
		LSC_EBR_WRITE       = 0xB2;
		LSC_EBR_READ        = 0xB0;
		LSC_PROG_INCR_NV    = 0x70;
		LSC_READ_INCR_NV    = 0x73;
		LSC_INIT_ADDR_UFM   = 0x47;
		LSC_READ_TAG        = 0xCA;
		LSC_ERASE_UFM       = 0xCB;
		LSC_PROG_UFM        = 0xC9;
		LSC_READ_UFM        = 0xCA;
		LSC_STORE           = 0xD0;
		LSC_BITSTREAM_BURST = 0x7A;
		LSC_PROG_PES        = 0xD0;
		LSC_PROG_MES        = 0xD1;
		LSC_PROG_MAIN_RED   = 0xD3;
		LSC_PROG_MAIN_RCR   = 0xD4;
		LSC_PROG_MAIN_RMR   = 0xD5;
		LSC_PROG_NV_RED     = 0xD6;
		LSC_PROG_NV_RMR     = 0xD7;
		LSC_READ_TRIM       = 0xD1;
		LSC_READ_MAIN_RED   = 0xDA;
		LSC_READ_MAIN_RCR   = 0xDC;
		LSC_READ_MAIN_RMR   = 0xDC;
		LSC_READ_NV_RED     = 0xDD;
		LSC_READ_NV_RMR     = 0xDE;
		LSC_MFG_MTEST       = 0x96;
		LSC_MFG_MTRIM       = 0x69;
		LSC_MFG_MDATA       = 0x8F;
		LSC_ISCAN           = 0xDF;	
		LSC_PROG_CTRL1      = 0x23;
		LSC_READ_CTRL1		= 0x21;
		LSC_AUTH_CTRL		= 0x58;		
		LSC_PROGR_USEC		= 0x57;
		LSC_PROG_AES_FEA    = 0xF9;
		LSC_READ_AES_FEA    = 0xFA;
		LSC_PROG_CSEC       = 0x54;
		LSC_READ_CSEC       = 0X55;
		LSC_PROG_USEC       = 0x56;
		LSC_READ_USEC       = 0x57;
		LSC_PROG_AUTH_MODE  = 0xC4;
		LSC_PROG_ECDSA_PUBKEY0 = 0x59;
		LSC_PROG_ECDSA_PUBKEY1 = 0x5B;
		LSC_PROG_ECDSA_PUBKEY2 = 0x61;
		LSC_PROG_ECDSA_PUBKEY3 = 0x63;		
		LSC_READ_ECDSA_PUBKEY0 = 0x5A;
		LSC_READ_ECDSA_PUBKEY1 = 0x5C;
		LSC_READ_ECDSA_PUBKEY2 = 0x62;
		LSC_READ_ECDSA_PUBKEY3 = 0x64;		
		LSC_PROG_CIPHER_KEY0 = 0xF3;
		LSC_PROG_CIPHER_KEY1 = 0xFD;		
		LSC_READ_CIPHER_KEY0 = 0xF4;
		LSC_READ_CIPHER_KEY1 = 0xFE;
		USERCODE_DRYRUN      = 0xC1;
		LSC_PROGRAM_AUTH_DONE = 0xCC;	
		LSC_PROG_UDS		= 0xD8;	
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAM">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000200000000000000000000000000000800000000000
			  000000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAMMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000200000000000000000000000000000800000000000
			  000000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
</Data>
<Operation_List  label="TurboOperation0">		
														
	"SRAM Bypass"	=	"INIT 	! Initialize";
	
	"XFLASH Refresh" = "INIT 	! Initialize, 
						 READ_ID	! Check the IDCODE, 
						 SYNCFUNCTION,
			 			 REFRESH_FUNCTION ! Refresh"	;
			 			 		
	"XFLASH Refresh with DONE"	= "	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable the background Flash,
									FLASHA_PROGRAM_DONE_BIT,
									FLASHB_PROGRAM_DONE_BIT,
			 			 			REFRESH_FUNCTION ! Refresh"	;
	
	"XFLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 	FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;
								
	"FLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the Flash,
								FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;	
														 
	"FLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"FLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"XFLASH Program and TransFR" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									REFRESH_FUNCTION ! Refresh"	;	
										
	"XFLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
	
	"XFLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode";
	
	
	"FLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
									
	"XFLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
																		
	"FLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_ENABLE	! Enable the Flash, 
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";
	
	"XFLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";	
							
	"XFLASH Erase DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
							 							
	
	"XFLASH Program DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_PROGRAM_DONE_BIT,
							 FLASHB_PROGRAM_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
	
	
	"Program Feature Row" ="	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,										
								FLASH_ENABLE	! Enable the programming mode,    
								SELECT_FEA,
								FEATURE_ERASE	! Erase the Feature,
								FEATURE_PROGRAM ! Program Feature Rows,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode"	;	
	
	"Background Program Feature Row" ="	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,										
									FLASH_TRANSPARENT_ENABLE	! Enable the programming mode,
									SELECT_FEA,
									FEATURE_ERASE	! Erase the Feature,
									FEATURE_PROGRAM ! Program Feature Rows,
									CHECK_STATUS ! Read the status bit,
									DISABLE ! Exit the programming mode"	;	
															 																																											 						 
	"Bypass"	=	"INIT 	! Initialize";		 			 																																								  							  							  
</Operation_List>
<Operation_List label="TurboOperation1">								
														
	"SRAM Bypass"	=	"INIT 	! Initialize";
	
	"XFLASH Refresh" = "INIT 	! Initialize, 
						 READ_ID	! Check the IDCODE, 
						 SYNCFUNCTION,
			 			 REFRESH_FUNCTION ! Refresh"	;
			 			 		
	"XFLASH Refresh with DONE"	= "	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable the background Flash,
									FLASHA_PROGRAM_DONE_BIT ! Program CFG0 DONE,
									FLASHB_PROGRAM_DONE_BIT ! Program CFG1 DONE,
			 			 			REFRESH_FUNCTION ! Refresh"	;
	
	"XFLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 	FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;
								
	"FLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the Flash,
								FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;	
														 
	"FLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"FLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"XFLASH Program and TransFR" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									REFRESH_FUNCTION ! Refresh"	;	
									
	"XFLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0 ,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
	
	"XFLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,									
							 		SELECT_CFG0 ,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode";
	
	
	"FLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
									
	"XFLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
																		
	"FLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_ENABLE	! Enable the Flash, 
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";
	
	"XFLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";	
	
	"XFLASH Erase DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
							 							
	
	"XFLASH Program DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_PROGRAM_DONE_BIT,
							 FLASHB_PROGRAM_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
	
	"Program Feature Row" ="	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,										
								FLASH_ENABLE	! Enable the programming mode,    
								SELECT_FEA,
								FEATURE_ERASE	! Erase the Feature,
								FEATURE_PROGRAM ! Program Feature Rows,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode"	;	
	
	"Background Program Feature Row" ="	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,										
									FLASH_TRANSPARENT_ENABLE	! Enable the programming mode,
									SELECT_FEA,
									FEATURE_ERASE	! Erase the Feature,
									FEATURE_PROGRAM ! Program Feature Rows,
									CHECK_STATUS ! Read the status bit,
									DISABLE ! Exit the programming mode"	;	
															 						 						 
	"Bypass"	=	"INIT 	! Initialize";								 	
							 		 			 				
</Operation_List>
<Operation_List label="TurboOperation2">											
	"SRAM Bypass"	=	"INIT 	! Initialize";	
	
	"XFLASH Refresh" = "INIT 	! Initialize, 
						 READ_ID	! Check the IDCODE, 
						 SYNCFUNCTION,
			 			 REFRESH_FUNCTION ! Refresh"	;
			 			 		
	"XFLASH Refresh with DONE"	= "	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable the background Flash,
									FLASHA_PROGRAM_DONE_BIT ! Program CFG0 DONE,
									FLASHB_PROGRAM_DONE_BIT ! Program CFG1 DONE,
			 			 			REFRESH_FUNCTION ! Refresh"	;
	
	"XFLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,									
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 	FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;
								
	"FLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the Flash,
								FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;	
														 
	"FLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"FLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"XFLASH Program and TransFR" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									REFRESH_FUNCTION ! Refresh"	;	
									
	"XFLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
	
	"XFLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode";
	
	
	"FLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
									
	"XFLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
																		
	"FLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_ENABLE	! Enable the Flash, 
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";
	
	"XFLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";	
	
	"XFLASH Erase DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
							 							
	
	"XFLASH Program DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_PROGRAM_DONE_BIT,
							 FLASHB_PROGRAM_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
	
	"Program Feature Row" ="	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,										
								FLASH_ENABLE	! Enable the programming mode,    
								SELECT_FEA,
								FEATURE_ERASE	! Erase the Feature,
								FEATURE_PROGRAM ! Program Feature Rows,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode"	;	
	
	"Background Program Feature Row" ="	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,										
									FLASH_TRANSPARENT_ENABLE	! Enable the programming mode,
									SELECT_FEA,
									FEATURE_ERASE	! Erase the Feature,
									FEATURE_PROGRAM ! Program Feature Rows,
									CHECK_STATUS ! Read the status bit,
									DISABLE ! Exit the programming mode"	;	
															 						 
	"Bypass"	=	"INIT 	! Initialize";	
							 		 			 																					 			 									 			 													 			 															  				 			 										  														 															 			 							
</Operation_List>
<Operation_List label="TurboOperation3">	
									
	"SRAM Bypass"	=	"INIT 	! Initialize";		
	
	"XFLASH Refresh" = "INIT 	! Initialize, 
						 READ_ID	! Check the IDCODE, 
						 SYNCFUNCTION,
			 			 REFRESH_FUNCTION ! Refresh"	;
			 			 		
	"XFLASH Refresh with DONE"	= "	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable the background Flash,
									FLASHA_PROGRAM_DONE_BIT ! Program CFG0 DONE,
									FLASHB_PROGRAM_DONE_BIT ! Program CFG1 DONE,
			 			 			REFRESH_FUNCTION ! Refresh"	;
	
	"XFLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"XFLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 	FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;
								
	"FLASH Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_ERASE,
							 FLASHB_CHECK_STATUS,
							 FLASHC_ERASE,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH CFG Erase Only" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_ENABLE	! Enable the Flash mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,																 
							 FLASHA_CFG_ERASE,
							 FLASHA_CHECK_STATUS,
							 FLASHB_CFG_ERASE,
							 FLASHB_CHECK_STATUS,
							 DISABLE ! Exit the programming mode"	;
	
	"FLASH UFM Erase Only" =	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the Flash,
								FLASHAUFM_ERASE,
								FLASHBUFM_ERASE,
								FLASHCUFM_ERASE,
								DISABLE ! Exit the programming mode"	;	
														 
	"FLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"FLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
									SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode,
									VERIFY_SRAM_DONE_BIT ! Verify SRAM DONE Bit";
	
	"XFLASH Program and TransFR" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode,
									REFRESH_FUNCTION ! Refresh"	;	
									
	"XFLASH Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,																 
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_CFG0,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									SELECT_CFG1,
									FLASHB_PROGRAM_DONE_BIT,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
	
	"XFLASH CFG Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									FLASHA_ERASE_DONE_BIT,
							 		FLASHB_ERASE_DONE_BIT,
							 		SELECT_CFG0,
									CFG0_ERASE,
									CFG0_PROGRAM, 
									CFG0_PROGRAM_USERCODE,
									CFG0_VERIFY,
									CFG0_VERIFY_USERCODE,
									FLASHA_PROGRAM_DONE_BIT,									
									SELECT_CFG1,
									CFG1_ERASE,
									CFG1_PROGRAM, 
									CFG1_PROGRAM_USERCODE,
									CFG1_VERIFY,
									CFG1_VERIFY_USERCODE,
									FLASHB_PROGRAM_DONE_BIT,
									DISABLE ! Exit the programming mode";
	
	
	"FLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_ENABLE	! Enable the Flash,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
									
	"XFLASH UFM Erase,Program,Verify" ="INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
									SELECT_UFM0,
									UFM0_ERASE,
									UFM0_PROGRAM,
									SELECT_UFM0,
									UFM0_VERIFY,
									SELECT_UFM1,
									UFM1_ERASE,
									UFM1_PROGRAM,
									SELECT_UFM1,
									UFM1_VERIFY,
									UFM2_PROGRAM_VERIFY,
									UFM3_PROGRAM_VERIFY,									
									DISABLE ! Exit the programming mode";
																		
	"FLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_ENABLE	! Enable the Flash, 
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";
	
	"XFLASH Verify Only" =	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							SELECT_CFG0,
							CFG0_VERIFY,
							CFG0_VERIFY_USERCODE,
							SELECT_UFM0,
							UFM0_VERIFY,				
							SELECT_CFG1,
							CFG1_VERIFY,
							CFG1_VERIFY_USERCODE,
							SELECT_UFM1,
							UFM1_VERIFY,
							UFM2_VERIFY_ONLY,
							UFM3_VERIFY_ONLY,
							DISABLE ! Exit the programming mode";	
							 
	"XFLASH Erase DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_ERASE_DONE_BIT,
							 FLASHB_ERASE_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
							 							
	
	"XFLASH Program DONE" =	"INIT 	! Initialize, 
							 READ_ID	! Check the IDCODE,
							 FLASH_TRANSPARENT_ENABLE	! Enable the Flash Transparent mode,
							 FLASHA_PROGRAM_DONE_BIT,
							 FLASHB_PROGRAM_DONE_BIT,
							 DISABLE ! Exit the programming mode"	;
	
	"Program Feature Row" ="	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,										
								FLASH_ENABLE	! Enable the programming mode,    
								SELECT_FEA,
								FEATURE_ERASE	! Erase the Feature,
								FEATURE_PROGRAM ! Program Feature Rows,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode"	;	
	
	"Background Program Feature Row" ="	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,										
									FLASH_TRANSPARENT_ENABLE	! Enable the programming mode,
									SELECT_FEA,
									FEATURE_ERASE	! Erase the Feature,
									FEATURE_PROGRAM ! Program Feature Rows,
									CHECK_STATUS ! Read the status bit,
									DISABLE ! Exit the programming mode"	;	
															 							 						 
	"Bypass"	=	"INIT 	! Initialize";								 		 			 																			 			 									 			 													 			 															  				 			 										  																 			 		
</Operation_List>
<Script>
<![CDATA[
int32   Temp_Row_Count = 0;
int32   Temp_UFM_Count = 0;
int32   Temp_UFM2_Count = 0;
int32	Temp_UFM3_Count = 0;
function NOT_SUPPORTED
{
	print (1,"Operation is not supported. Cannot continue.");	
}
function INIT 
{
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
	IF (Address_Length == 888)
    {
    	Temp_Row_Count = 12542;
    	Temp_UFM_Count = 3582;
		Temp_UFM2_Count = 1151;
		Temp_UFM3_Count = 191;
		SYNC;
    }
    ELSEIF (Address_Length == 623)
    {
    	Temp_Row_Count = 5759;
    	Temp_UFM_Count = 767;
    	Temp_UFM2_Count = 1151;
		Temp_UFM3_Count = 191;
		SYNC;
    }
    ELSE
    {
    	Temp_Row_Count = 0;
    	SYNC;
    }
	SYNC;
}
function SVFINIT 
{
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
	IF (Address_Length == 888)
    {
    	Temp_Row_Count = 12542;
    	Temp_UFM_Count = 3582;
		Temp_UFM2_Count = 1151;
		Temp_UFM3_Count = 191;
		SYNC;
    }
    ELSEIF (Address_Length == 623)
    {
    	Temp_Row_Count = 5759;
    	Temp_UFM_Count = 767;
    	Temp_UFM2_Count = 1151;
		Temp_UFM3_Count = 191;
		SYNC;
    }
    ELSE
    {
    	Temp_Row_Count = 0;
    	SYNC;
    }
	SYNC;
}									

function PRELOAD {
   // Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(LSC_PRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   SYNC;
}

function INI_PRELOAD {				
   // Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(LSC_PRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length);
   SYNC;
}


function READ_ID 
{
	// Shift in IDCODE_PUB(0xE0) instruction;
    SIR Instruction_Length 	TDI (IDCODE_PUB);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);
	SYNC;	
}								
function SRAM_ENABLE {
	// Shift in ISC ENABLE(0xC6) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 1;
	SYNC;
}

function SRAM_ERASE {
	// Shift in ISC ERASE(0x0E) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
    SDR 8 TDI(0x01);
	RUN_TEST 	TCK 2 DELAY 1000;
	// Shift in BYPASS(0xFF) instruction;
    SIR_VERIFY Instruction_Length TDI (BYPASS)
    					   		  TDO (0x00)
    					   		  MASK(0xC4);
    SYNC;
}
function FLASHA_CFG_ERASE 
{
	IF (ISFLASHA == 1)
	{
		! Erase the FlashA;
		! Select CFG0 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		! Erase the CFG0;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0001);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	SYNC;
}
function FLASHA_ERASE 
{
	IF (ISFLASHA == 1)
	{
		! Erase the FlashA;
		! Select CFG0 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		! Erase the CFG0;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0001);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
		! Select UFM0 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0004);
		RUN_TEST	IDLE TCK 2 DELAY 	1;		
		! Erase the UFM0;	
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0004);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	SYNC;
}
function FLASHA_CHECK_STATUS
{
	IF (ISFLASHA == 1)
	{
		// check bit Flash CFG0_DONE bit(12) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV;
		SDR_VERIFY  32 	TDI(#0^32) 
						TDO(0x00000000) 
						MASK(0x00001000);
		SYNC;
	}
	SYNC;
}
function FLASHB_CFG_ERASE 
{
	IF (ISFLASHB == 1)
	{
		! Erase the FlashB;
		! Select CFG1 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the CFG1;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0002);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHB_ERASE 
{
	IF (ISFLASHB == 1)
	{
		! Erase the FlashB;
		! Select CFG1 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the CFG1;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0002);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
		! Select UFM1 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0008);
		RUN_TEST	IDLE TCK 2 DELAY 	1;		
		! Erase the UFM1;	
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0008);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHB_CHECK_STATUS
{
	IF (ISFLASHB == 1)
	{
		// check bit Flash CFG0_DONE bit(12) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV;
		SDR_VERIFY  32 	TDI(#0^32)
						TDO(0x00000000)
						MASK(0x00002000);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHC_ERASE 
{
	IF (ISFLASHC == 1)
	{
		! Erase the FlashC;
		! Select UFM2 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM2;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0010);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
		! Select UFM3 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM3;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0020);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function CFG0_ERASE 
{	
	IF (ISFLASHA == 1)
	{
		! Erase the CFG0;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0001);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}

function CFG1_ERASE 
{	
	IF (ISFLASHB == 1)
	{
		! Erase the CFG1;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0002);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function UFM0_ERASE 
{
	IF (ISFLASHA == 1)
	{
		! Erase the UFM0;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0004);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}

function UFM1_ERASE 
{
	IF (ISFLASHB == 1)
	{
		! Erase the UFM1;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0008);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function UFM2_ERASE 
{
	! Erase the UFM2;
	// Shift in ISC ERASE(0x0E) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
    SDR 16 TDI(0x0010);
	RUN_TEST 	TCK 2 ;
	// Shift in LSC_CHECK_BUSY(0xF0) instruction;
    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
	loop PWE {
		RUN_TEST IDLE  TCK 2 DELAY PWV;
		SDR_VERIFY 1 TDI(#0) TDO(#0);
	}
	SYNC;
}

function UFM3_ERASE 
{
	! Erase the UFM3;
	// Shift in ISC ERASE(0x0E) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
    SDR 16 TDI(0x0020);
	RUN_TEST 	TCK 2 ;
	// Shift in LSC_CHECK_BUSY(0xF0) instruction;
    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
	loop PWE {
		RUN_TEST IDLE  TCK 2 DELAY PWV;
		SDR_VERIFY 1 TDI(#0) TDO(#0);
	}
	SYNC;
}
								
function CHECK_SRAM_ERASE_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000010);
	SYNC;
}

function CHECK_SRAM_PROG_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000020);
	SYNC;
}

function CHECK_SRAM_READ_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000040);
	SYNC;
}

function CHECK_PASSWORD 
{	
	IF (ProtectKey.row = 1)
	{			  
		// Shift in LSC_SHIFT_PASSWORD(0xBC) instruction;
		SIR Instruction_Length TDI (LSC_SHIFT_PASSWORD);
		SDR  128  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 2 DELAY PWP; 
		
		// Shift in LSC_READ_STATUS0(0x3C) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS0);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 	TDI(#0^32)
				  		TDO(0x00010000)
				  		MASK(0x00010200);										  
	}
	ELSE
	{
		// Shift in LSC_READ_STATUS0(0x3C) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS0);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_TRY_VERIFY  32 	TDI(#0^32)
						  	TDO(0x00000000)
						  	MASK(0x00030000);			  			  
	}	
	SYNC;	
}
				
function BURST_PROGRAM 
{
	SYNC;
	FuseArray_TDI.row = 1;
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
    SDR 16 TDI(0x0000);
	RUN_TEST	IDLE TCK 2 DELAY 	1;
	
	// Shift in LSC_BITSTREAM_BURST(0x7A) instruction;
    SIR Instruction_Length	TDI (LSC_BITSTREAM_BURST);
	// Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse	TDI	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 100 DELAY PWP;
	SYNC;
}

function PROGRAM_CONTROL0 
{
	datastream SavedControl0[1][32];
	IF (Control_Register_0_TDI.row = 1)
	{
		SavedControl0[1] = Control_Register_0_TDI[1];
		SavedControl0[1] = $SavedControl0[1];
		// Shift in LSC_PROG_CTRL0(0x22) instruction;
	    SIR Instruction_Length TDI (LSC_PROG_CTRL0);
		SDR 32 TDI(SavedControl0[1]);
		RUN_TEST IDLE TCK 2 DELAY PWP; 
		// Shift in LSC_READ_CTRL0(0x20) instruction;
	    SIR Instruction_Length TDI (LSC_READ_CTRL0);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(SavedControl0[1])
					   MASK(0xFFFFFFFF);
	}
	SYNC;
}	

function VERIFY_CONTROL0 
{
	datastream SavedControl0[1][32];
	IF (Control_Register_0_TDI.row = 1)
	{
		SavedControl0[1] = Control_Register_0_TDI[1];
		SavedControl0[1] = $SavedControl0[1];
		// Shift in LSC_READ_CTRL0(0x20) instruction;
	    SIR Instruction_Length TDI (LSC_READ_CTRL0);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(SavedControl0[1])
					   MASK(0xFFFFFFFF);
	}
	SYNC;
}


function PROGRAM_CONTROL1 
{
	datastream SavedControl1[1][32];
	IF (Control_Register_1_TDI.row = 1)
	{
		SavedControl1[1] = Control_Register_1_TDI[1];
		SavedControl1[1] = $SavedControl1[1];
		// Shift in LSC_PROG_CTRL1(0x23) instruction;
	    SIR Instruction_Length TDI (LSC_PROG_CTRL1);
		SDR 32 TDI(SavedControl1[1]);
		RUN_TEST IDLE TCK 2 DELAY PWP; 
		// Shift in LSC_READ_CTRL1(0x21) instruction;
	    SIR Instruction_Length TDI (LSC_READ_CTRL1);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(SavedControl1[1])
					   MASK(0xFFFFFFFF);
	}
	SYNC;
}

function VERIFY_CONTROL1 
{
	datastream SavedControl1[1][32];
	IF (Control_Register_1_TDI.row = 1)
	{
		SavedControl1[1] = Control_Register_1_TDI[1];
		SavedControl1[1] = $SavedControl1[1];
		// Shift in LSC_READ_CTRL1(0x21) instruction;
	    SIR Instruction_Length TDI (LSC_READ_CTRL1);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(SavedControl1[1])
					   MASK(0xFFFFFFFF);
	}
	SYNC;
}

function SRAM_PROGRAM 
{
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;	
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	SDR 8 TDI(0x00);
	RUN_TEST	IDLE TCK 2 DELAY 	1;
	// Shift in LSC_PROG_INCR(0x82) instruction;
    SIR Instruction_Length	TDI	(LSC_PROG_INCR);
	repeat Address_Length {
		// Shift Out Data Row = RowCount;
	    SDR	Row_Width	TDI	(FuseArray_TDI);	    
	    RUN_TEST	IDLE TCK 2 DELAY 	PWP;						
		RowCount = RowCount +1;
	}
	SYNC;				
}	

function CFG0_PROGRAM 
{
	int32	RowCount = 1;
	IF (ISFLASHA == 1)
	{
		! Program CFG0;
		FuseArray_TDI_CFG0.row = 1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_Row_Count
		{
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
			SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);    								
			// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(FuseArray_TDI_CFG0[RowCount]);
			RUN_TEST IDLE TCK 2 ;	
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
			SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST IDLE DELAY 1;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	  
			RowCount = RowCount +1;
			SYNC;		
		} 	
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}

function CFG1_PROGRAM 
{
	int32	RowCount = 1;
	IF (ISFLASHB == 1)
	{
		! Program CFG1;
		FuseArray_TDI_CFG1.row = 1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_Row_Count
		{
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
			SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);    								
			// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(FuseArray_TDI_CFG1[RowCount]);
			RUN_TEST IDLE TCK 2 ;	
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
			SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST IDLE DELAY 1;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	  
			RowCount = RowCount +1;	
			SYNC;	
		} 	
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function UFM0_PROGRAM 
{
	int32	RowCount = 1;
	IF (ISFLASHA == 1)
	{	
		! Program UFM0;
		EFuseArray_TDI_UFM0.row = 1;	
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0004);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_UFM_Count
		{	
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);
	    	// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(EFuseArray_TDI_UFM0[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		} 	
		SYNC;	   
	}
	ELSE
	{
		SYNC;
	}
}

function UFM1_PROGRAM 
{
	int32	RowCount = 1;
	IF (ISFLASHB == 1)
	{	
		! Program UFM1;
		EFuseArray_TDI_UFM1.row = 1;	
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0008);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_UFM_Count{	
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);
	    	// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(EFuseArray_TDI_UFM1[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC; 		   
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function UFM2_PROGRAM 
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM2.row == 1)
	{		
		! Program UFM2;
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_UFM2_Count
		{	
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);
	    	SDR	128	TDI	(EFuseArray_TDI_UFM2[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		} 
		SYNC;	   
	}
	ELSE
	{
		SYNC;
	}
	
}

function UFM3_PROGRAM 
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM3.row == 1)
	{	
		! Program UFM3;	
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		repeat Temp_UFM3_Count
		{	
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);			
			SDR	128	TDI	(EFuseArray_TDI_UFM3[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		} 
		SYNC;			   
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function SRAM_PROGRAM_USERCODE 
{
	IF (Usercode_TDI.row = 1)
	{
		Usercode_TDI[1] = $Usercode_TDI[1];
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI[1]);
		// Shift in ISC PROGRAM USERCODE(0xC2) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		RUN_TEST	TCK 2   DELAY 	PWP;
	}
	SYNC;
}	

function SRAM_VERIFY 
{
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	SDR 8 TDI(0x00);
	RUN_TEST	IDLE TCK 2 DELAY 	1;
	// Shift in LSC_READ_INCR(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSC_READ_INCR);
	repeat Address_Length {
		RUN_TEST	IDLE TCK 2 DELAY 	PWV;
		// Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(FuseArray_TDI)
								MASK(FuseArray_MASK);
		RowCount = RowCount +1;
	}
	
	SYNC;				
}

function CFG0_VERIFY 
{
	int32	RowCount = 1;
	IF (ISFLASHA == 1)
	{
		! Verify the CFG0;
		FuseArray_TDI_CFG0.row = 1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_Row_Count{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(FuseArray_TDI_CFG0[RowCount]);	
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}					
}

function CFG1_VERIFY 
{
	int32	RowCount = 1;
	IF (ISFLASHB == 1)
	{
		! Verify the CFG1;
		FuseArray_TDI_CFG1.row = 1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_Row_Count{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(FuseArray_TDI_CFG1[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;					
}

function UFM0_VERIFY 
{
	int32	RowCount = 1;
	IF (ISFLASHA == 1)
	{
		! Verify the UFM0;
		EFuseArray_TDI_UFM0.row = 1;		
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
    	SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0004);
    	RUN_TEST	IDLE  TCK 2 DELAY 1;      	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM0[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}					
}

function UFM1_VERIFY 
{
	int32	RowCount = 1;
	IF (ISFLASHB == 1)
	{
		! Verify the UFM1;
		EFuseArray_TDI_UFM1.row = 1;		
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
    	SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0008);
    	RUN_TEST	IDLE  TCK 2 DELAY 1;      	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM_Count{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM1[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;			
	}
	ELSE
	{
		SYNC;
	}
	SYNC;					
}

function UFM2_VERIFY {
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM2.row = 1)
	{		
		! Verify the UFM2;
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
    	SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0010);
    	RUN_TEST	IDLE  TCK 2 DELAY 1;      	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM2_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM2[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;			
	}
	ELSE
	{
		SYNC;
	}					
}

function UFM3_VERIFY 
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM3.row = 1)
	{	
		! Verify the UFM3;	
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
    	SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0020);
    	RUN_TEST	IDLE  TCK 2 DELAY 1;      	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM3_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM3[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}
		SYNC;			
	}
	ELSE
	{
		SYNC;
	}
	SYNC;					
}

function PROGRAM_DONE_BIT 
{
	SYNC;
	// Shift in ISC PROGRAM DONE(0x5E) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 2 DELAY 2000;				
	SYNC;
}
function FLASHA_PROGRAM_DONE_BIT 
{
	IF (ISFLASHA == 1)
	{	
		! Program Done bit;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	10;	
	
		// Shift in ISC PROGRAM DONE(0x5E) instruction;
		SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 2 DELAY 2000;	
			
		// check bit Flash CFG0_DONE bit(12) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV;
		SDR_VERIFY  32 	TDI(#0^32) 
						TDO(0x00001000) 
						MASK(0x00001000);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function FLASHB_PROGRAM_DONE_BIT 
{
	SYNC;
	IF (ISFLASHB == 1)
	{
		! Program Done bit;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	10;		
	
		// Shift in ISC PROGRAM DONE(0x5E) instruction;
		SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 2 DELAY 2000;	
		
		// check bit Flash CFG1_DONE bit(13) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 	TDI(#0^32)
						TDO(0x00002000)
						MASK(0x00002000);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function DISABLE 
{
	SYNC;
	// Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1000;     
	     
	// Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 100 DELAY 100;
	SYNC;
}																
function REFRESH_FUNCTION 
{
	// Shift in LSC_REFRESH(0x79) instruction;
    SIR Instruction_Length	TDI (LSC_REFRESH);
    RUN_TEST IDLE TCK 2 DELAY 1000; 

	// Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 100 DELAY 5000;
	SYNC;
}																												
function SRAM_TRANSPARENT_READ_ENABLE 
{
	SYNC;
	// Shift in LSC_ENABLE_X(0x74) instruction;
    SIR Instruction_Length TDI (LSC_ENABLE_X);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	SYNC;
}

function VERIFY_STATUS 
{
	// Shift in LSC_READ_STATUS0(0x3C) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS0);
    SDR_VERIFY	32	TDI(#0^32)
					TDO(0x00000100)
					MASK(0x00002100);
	SYNC;
}

function FLASH_ENABLE
{
	SYNC;
    // SRAM Erase
	// Shift in ISC ENABLE(0xC6) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	
	// Shift in ISC ERASE(0x0E) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
    SDR 8 TDI(0x01);
	RUN_TEST 	TCK 2 DELAY 10;
    SYNC;
	SYNC;
	// Shift in ISC ENABLE(0xC6) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
    SDR 8 TDI(0x08);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	SYNC;
}
function FLASH_TRANSPARENT_ENABLE {
	SYNC;
	// Shift in LSC_ENABLE_X(0x74) instruction;
    SIR Instruction_Length TDI (LSC_ENABLE_X);
    SDR 8 TDI(0x08);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	SYNC;
}
function SELECT_CFG0
{
	IF (ISFLASHA == 1)
	{
		! Select CFG0;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	    SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function SELECT_CFG1
{
	IF (ISFLASHB == 1)
	{
		! Select CFG1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	    SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function SELECT_UFM0
{
	IF (ISFLASHA == 1)
	{
		! Select UFM0;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	    SDR 16 TDI(0x0004);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function SELECT_UFM1
{
	IF (ISFLASHB == 1)
	{
		! Select UFM1;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	    SDR 16 TDI(0x0008);
		RUN_TEST	IDLE TCK 2 DELAY 	1;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function SELECT_UFM2
{
	! Select UFM2;
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
    SDR 16 TDI(0x0010);
	RUN_TEST	IDLE TCK 2 DELAY 	1;	
	SYNC;
}
function SELECT_UFM3
{
	! Select UFM3;
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
    SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
    SDR 16 TDI(0x0020);
	RUN_TEST	IDLE TCK 2 DELAY 	1;
	SYNC;
}
function SELECT_FEA
{
	! Select FEA;
	// Shift in LSC_INIT_ADDRESS(0x46) instruction;
	SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
	SDR 16 TDI(0x0400);
	RUN_TEST	IDLE TCK 2 DELAY 	1;	
	SYNC;	
}
function FEATURE_ERASE 
{
	// Shift in ISC ERASE(0x0E) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
    SDR 16 TDI(0x0400);
	RUN_TEST 	TCK 2 ;
	// Shift in LSC_CHECK_BUSY(0xF0) instruction;
    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
	loop PWE {
		RUN_TEST IDLE  TCK 2 DELAY PWP;
		SDR_VERIFY 1 TDI(#0) TDO(#0);
	}
	SYNC;
}
function FEATURE_PROGRAM 
{
	datastream FeatureArray[1][96];
	datastream FeatureBitsArray[1][16];
	IF (ArchArray_TDI.row = 1)
	{
		FeatureArray[1] = ArchArray_TDI[1] << 32;
		FeatureArray[1] = $FeatureArray[1];
		// Shift in LSC_PROG_FEATURE( 0xE4) instruction;
	    SIR Instruction_Length	TDI (LSC_PROG_FEATURE);
	    SDR 128 TDI((#0^32) @ FeatureArray[1]);
	    RUN_TEST IDLE TCK 2 ;
	    // Shift in LSC_CHECK_BUSY(0xF0) instruction;
    	SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWP {
			RUN_TEST IDLE DELAY 1;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}	
	    // Shift in LSC_READ_FEATURE (0xE7) instruction;
	    SIR Instruction_Length	TDI (LSC_READ_FEATURE);
	    SDR_VERIFY 128   TDI(#0^128)
	    				TDO((#0^32) @ FeatureArray[1] )
						MASK(0x00000000FFFFFFFFFFFFFFFFFFFFFFFF);
	    		
	    FeatureBitsArray[1] = ArchArray_TDI[1];
	    FeatureBitsArray[1] = $FeatureBitsArray[1];
	    
	    // Shift in in LSC_PROG_FEABITS(0xF8) instruction;
	    SIR Instruction_Length	TDI (LSC_PROG_FEABITS);
	    SDR 32 TDI(FeatureBitsArray[1]);
	    RUN_TEST IDLE TCK 2 ;
	    // Shift in LSC_CHECK_BUSY(0xF0) instruction;
    	SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWP {
			RUN_TEST IDLE DELAY 1;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}	  
		// Shift in in LSC_READ_FEABITS(0xFB) instruction;
	    SIR Instruction_Length	TDI (LSC_READ_FEABITS);
	    RUN_TEST	IDLE TCK 2 DELAY 	PWV;
	    SDR_VERIFY 32   TDI(#0^32)
	    				TDO(FeatureBitsArray[1])
	    				MASK(0x0001FFFF);
	    SYNC;
	    
	}
	SYNC;
}
function CHECK_ERASE_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000010);
	SYNC;
}
function CHECK_PROG_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000020);
	SYNC;
}
function CHECK_READ_LOCK
{
	// Shift in LSC_READ_STATUS1(0x3D) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS1);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00000040);
	SYNC;
}

function CFG0_PROGRAM_USERCODE
{
	IF (ISFLASHA == 1)
	{
		! Program CFG0 Usercode;
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI_CFG0[1]);
		// Shift in ISC PROGRAM USERCODE(0xC2) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		RUN_TEST	TCK 2   DELAY 	PWP;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}

function CFG1_PROGRAM_USERCODE 
{
	IF (ISFLASHB == 1)
	{
		! Program CFG1 Usercode;
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI_CFG1[1]);
		// Shift in ISC PROGRAM USERCODE(0xC2) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		RUN_TEST	TCK 2   DELAY 	PWP;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function PROGRAM_USERCODE 
{
	IF (Usercode_TDI.row = 1)
	{
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI[1]);
		// Shift in ISC PROGRAM USERCODE(0xC2) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		RUN_TEST	TCK 2   DELAY 	PWP;
	}
	SYNC;
}

function CFG0_VERIFY_USERCODE 
{
	IF (ISFLASHA == 1)
	{
		! Verify CFG0 Usercode;
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
	    RUN_TEST	TCK 2  DELAY 	PWV;
		SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI_CFG0[1])
									MASK(0xFFFFFFFF);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}

function CFG1_VERIFY_USERCODE 
{
	IF (ISFLASHB == 1)
	{
		! Verify CFG1 Usercode;
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
	    RUN_TEST	TCK 2  DELAY 	PWV;
		SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI_CFG1[1])
									MASK(0xFFFFFFFF);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function SRAM_VERIFY_USERCODE 
{
	IF (Usercode_TDI.row = 1)
	{
		Usercode_TDI[1] = $Usercode_TDI[1];
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
	    RUN_TEST	TCK 2  DELAY 	PWV;
		SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI[1])
									MASK(0xFFFFFFFF);
	}
	SYNC;
}
function VERIFY_USERCODE 
{
	IF (Usercode_TDI.row = 1)
	{
		// Shift in READ USERCODE(0xC0) instruction;
	    SIR Instruction_Length TDI (USERCODE);
	    RUN_TEST	TCK 2  DELAY 	PWV;
		SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI)
									MASK(0xFFFFFFFF);
	}
	SYNC;
}

function VERIFY_SRAM_DONE_BIT 
{
	SYNC;
	RUN_TEST	IDLE  TCK 100 DELAY 5000;
	// Shift in LSC_READ_STATUS0(0x3C) instruction;
	SIR Instruction_Length TDI (LSC_READ_STATUS0);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  		TDO(0x00000100)
			  		MASK(0x00002100);
	SYNC;
}

function DISABLE_REFRESH {	
	// Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1000;   
	
	// Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 2 DELAY 100;
	
	SYNC;
}

function FLASH_PROGRAM_DONE_BIT 
{
	// Shift in ISC PROGRAM DONE(0x5E) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 2 ;
	// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	SIR Instruction_Length TDI (LSC_CHECK_BUSY);
	loop PWP {
		RUN_TEST IDLE DELAY 1;
		SDR_VERIFY 1 TDI(#0) TDO(#0);
	}		
	// Shift in BYPASS(0xFF) instruction;
	SIR_VERIFY	Instruction_Length 	TDI (BYPASS)
									TDO(0x04)
									MASK(0xC4);
	SYNC;
}
function VERIFY_DONE_BIT {	
	RUN_TEST	IDLE  TCK 100 DELAY 5000;
	// Shift in BYPASS(0xFF) instruction;
    SIR_VERIFY	Instruction_Length 	TDI (BYPASS)
									TDO(0x04)
									MASK(0x84);	
	SYNC;   	      	
}

function CHECK_STATUS {
	// Shift in LSC_READ_STATUS0(0x3C) instruction;
	SIR Instruction_Length TDI(LSC_READ_STATUS0);
	RUN_TEST IDLE TCK 2 DELAY PWV; 
	SDR_VERIFY  32 	TDI(#0^32)
			  	TDO(0x00000000)
			  	MASK(0x00003000);
	SYNC;
}
function UFM2_PROGRAM_VERIFY
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM2.row = 1)
	{
		! Select UFM2;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		// Erase UFM2;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0010);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
	 	SYNC;
		! Program the UFM2;
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		repeat Temp_UFM2_Count
		{	
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);
	    	// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(EFuseArray_TDI_UFM2[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		} 
		SYNC; 
		! Select UFM2;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Verify the UFM2;
		RowCount = 1;													
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;  	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM2_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM2[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}	 
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function UFM3_PROGRAM_VERIFY
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM3.row = 1)
	{
		! Select UFM3;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase UFM3;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0020);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
		! Program the UFM3;
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI (0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;			
		repeat Temp_UFM3_Count
		{		
			// Shift in LSC_PROG_INCR_NV(0x70) instruction;
	    	SIR Instruction_Length	TDI (LSC_PROG_INCR_NV);
	    	// Shift in Data Row = RowCount; 			
			SDR	128	TDI	(EFuseArray_TDI_UFM3[RowCount]);
			RUN_TEST IDLE TCK 2 ;
			// Shift in LSC_CHECK_BUSY(0xF0) instruction;
		    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
			loop PWP {
				RUN_TEST DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#0);
			}	
			RowCount = RowCount +1;
			SYNC;
		} 
		SYNC; 
		! Select UFM3;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Verify the UFM3;	
		RowCount = 1;												
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	   	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM3_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM3[RowCount]);
			RowCount = RowCount +1;
			SYNC; 
		}	
		SYNC; 
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHAUFM_ERASE
{
	IF (ISFLASHA == 1)
	{
		! Erase the FlashA UFM;
		! Select UFM0 Sector;	
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0004);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM0;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0004);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}	
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function FLASHBUFM_ERASE
{
	SYNC;
	IF (ISFLASHB == 1)
	{
		! Erase the FlashB UFM;
		! Select UFM1 Sector;	
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0008);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM1;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0008);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}	
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHCUFM_ERASE
{
	SYNC;
	IF (ISFLASHC_UFM2 == 1)
	{
		! Erase the FlashC UFM2;
		! Select UFM2 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM2;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0010);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}	
		SYNC;	
	}
	ELSE
	{
		SYNC;
	}
	IF (ISFLASHC_UFM3 == 1)
	{
		! Erase the FlashC UFM3;
		! Select UFM3 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase the UFM3;
		// Shift in ISC ERASE(0x0E) instruction;
	    SIR Instruction_Length TDI (ISC_ERASE);
	    SDR 16 TDI(0x0020);
		RUN_TEST 	TCK 2 ;
		// Shift in LSC_CHECK_BUSY(0xF0) instruction;
	    SIR Instruction_Length TDI (LSC_CHECK_BUSY);
		loop PWE {
			RUN_TEST IDLE  TCK 2 DELAY PWP;
			SDR_VERIFY 1 TDI(#0) TDO(#0);
		}
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function UFM2_VERIFY_ONLY
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM2.row = 1)
	{
		! Select UFM2;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Verify the UFM2;
		RowCount = 1;													
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0010);
		RUN_TEST	IDLE TCK 2 DELAY 	1;  	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM2_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM2[RowCount]);
			RowCount = RowCount +1;
			SYNC;
		}	 
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function UFM3_VERIFY_ONLY
{
	int32	RowCount = 1;
	IF (EFuseArray_TDI_UFM3.row = 1)
	{
		! Select UFM3;													
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Verify the UFM3;	
		RowCount = 1;												
		// Shift in LSC_INIT_ADDR_UFM(0x47) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDR_UFM);
		SDR 16 TDI(0x0020);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	   	
		// Shift in LSC_READ_INCR_NV(0x73) instruction;
	    SIR Instruction_Length	TDI	(LSC_READ_INCR_NV);
		repeat Temp_UFM3_Count
		{	
			RUN_TEST	IDLE TCK 2 DELAY 	PWV;
			// Shift out Data Row = RowCount; 
			SDR_VERIFY	128	TDI	(#0^128)
							TDO	(EFuseArray_TDI_UFM3[RowCount]);
			RowCount = RowCount +1;
			SYNC; 
		}	
		SYNC; 
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function FLASHA_ERASE_DONE_BIT 
{
	IF (ISFLASHA == 1)
	{
		! Select CFG0 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		! Erase DONE bit;
		// Shift in ISC_ERASE_DONE(0x24) instruction;
	    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
		RUN_TEST IDLE TCK 2 DELAY 200;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function FLASHB_ERASE_DONE_BIT 
{
	IF (ISFLASHB == 1)
	{
		! Select CFG1 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;		
		! Erase DONE bit;
		// Shift in ISC_ERASE_DONE(0x24) instruction;
	    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
		RUN_TEST IDLE TCK 2 DELAY 200;
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}
function FLASHA_PROGRAM_DONE_BIT 
{
	IF (ISFLASHA == 1)
	{
		! Select CFG0 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0001);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		// Shift in ISC PROGRAM DONE(0x5E) instruction;
		SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 2 DELAY PWP;		
		// check bit Flash CFG0_DONE bit(12) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 	TDI(#0^32)
						TDO(0x00001000)
						MASK(0x00001000);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
}
function FLASHB_PROGRAM_DONE_BIT 
{
	IF (ISFLASHB == 1)
	{
		! Select CFG1 Sector;
		// Shift in LSC_INIT_ADDRESS(0x46) instruction;
		SIR Instruction_Length	TDI (LSC_INIT_ADDRESS);
		SDR 16 TDI(0x0002);
		RUN_TEST	IDLE TCK 2 DELAY 	1;	
		// Shift in ISC PROGRAM DONE(0x5E) instruction;
		SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 2 DELAY PWP;		
		// check bit Flash CFG0_DONE bit(12) of the status register1
		// Shift in LSC_READ_STATUS1(0x3D) instruction;
		SIR Instruction_Length TDI (LSC_READ_STATUS1);
		RUN_TEST IDLE TCK 2 DELAY PWV; 
		SDR_VERIFY  32 	TDI(#0^32)
						TDO(0x00001000)
						MASK(0x00001000);
		SYNC;
	}
	ELSE
	{
		SYNC;
	}
	SYNC;
}

function SYNCFUNCTION {
	SYNC;
}
]]>
</Script>
</SVF_Plus>