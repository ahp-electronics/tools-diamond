<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Trigger Expression Syntax</title><link rel="Prev" href="trigger_unit_ops_RA.htm" title="Previous" /><link rel="Next" href="example_trigger_expr_RA.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/la_analyzer.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pDISLoK2RPOgJA5hmkYEdxQ" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/User%20Guides/On-Chip%20Debugging/trigger_expressions_2.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Getting%20Startred/Getting_Started.htm">User Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="debugging_on_chip.htm#1189939">Testing and Debugging On-Chip</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="About_Reveal_Logic_Analyzer.htm#1189939">Performing Logic Analysis</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="set_trigger_signals.htm#1189939">Setting Up the Trigger Signals</a> &gt; Trigger Expression Syntax</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1189939" class="Heading3"><span></span>Trigger Expression Syntax</h4><p id="ww1211109" class="BodyAfterHead"><span></span>Trigger expressions are combinations of trigger units. Trigger units can be combined in combinatorial, sequential, and mixed combinatorial and sequential patterns. A trigger expression can be dynamically changed at any time. Each module supports up to 16 trigger expressions that can be dynamically enabled or disabled in Reveal Analyzer. Trigger expressions support AND, OR, XOR, NOT, parentheses (for grouping), THEN, NEXT, # (count), and ## (consecutive count) operators. Each part of a trigger expression, called a sequence, can also be required to be valid a number of times before continuing to the next sequence in the trigger expression.</p><h5 id="ww1211110" class="HeadingRunIn"><span></span>Detailed Trigger Expression Syntax</h5><p id="ww1211111" class="BodyAfterHead"><span></span>Trigger expressions in both Reveal Inserter and Reveal Analyzer use the same syntax.</p><h5 id="ww1211112" class="HeadingRunIn"><span></span>Operators</h5><p id="ww1211113" class="BodyAfterHead"><span></span>You can use the following operators to connect trigger units:</p><div id="ww1211114" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>&amp; (AND) – Combines trigger units using an AND operator.</div><div id="ww1211115" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>| (OR) – Combines trigger units using an OR operator.</div><div id="ww1211116" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>^ (XOR) – Combines trigger units using a XOR operator.</div><div id="ww1211117" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>! (NOT) – Combines a trigger unit with a NOT operator.</div><div id="ww1211118" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>Parentheses – Groups and orders trigger units.</div><div id="ww1211119" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>THEN – Creates a sequence of wait conditions. For example, the following statement:</div><pre id="ww1211120" class="CodeIndented">TU1 THEN TU2</pre><div id="ww1211121" class="Indented">means “wait for TU1 to be true, then wait for TU2 to be true.”<span style="font-size: 12.0pt"> </span></div><div id="ww1211122" class="Indented">The following expression:</div><pre id="ww1211123" class="CodeIndented">(TU1 &amp; TU2) THEN TU3</pre><div id="ww1211124" class="Indented">means “wait for TU1 and TU2 to be true, then wait for TU3 to be true.”</div><div id="ww1211125" class="Indented">Reveal supports up to 16 sequence levels.</div><div id="ww1211129" class="Indented">See <a href="../../User%20Guides/On-Chip%20Debugging/trigger_expressions_2.htm#ww1211147" title="Trigger Expression Syntax">Sequences and Counters</a> for more information on THEN statements.</div><div id="ww1211130" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>NEXT – Creates a sequence of wait conditions, like THEN, except the second trigger unit must come immediately after the first. That is, the second trigger unit must occur in the next clock cycle after the first trigger unit. See <a href="../../User%20Guides/On-Chip%20Debugging/trigger_expressions_2.htm#ww1211147" title="Trigger Expression Syntax">Sequences and Counters</a> for more information on NEXT statements.</div><div id="ww1211136" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span># (count) – Inserts a counter into a sequence. See <a href="../../User%20Guides/On-Chip%20Debugging/trigger_expressions_2.htm#ww1211147" title="Trigger Expression Syntax">Sequences and Counters</a> for information on counters.</div><div id="ww1211138" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>## (consecutive count) – Inserts a counter into a sequence. Like # (count) except that the trigger units must come in consecutive clock cycles. That is, one trigger unit immediately after another with no delay between them. See <a href="../../User%20Guides/On-Chip%20Debugging/trigger_expressions_2.htm#ww1211147" title="Trigger Expression Syntax">Sequences and Counters</a> for information on counters.</div><h5 id="ww1211142" class="HeadingRunIn"><span></span>Case Sensitivity</h5><p id="ww1211143" class="Body"><span></span>Trigger expressions are case-insensitive.</p><h5 id="ww1211144" class="HeadingRunIn"><span></span>Spaces</h5><p id="ww1211145" class="Body"><span></span>You can use spaces anywhere in a trigger expression.</p><h5 id="ww1211147" class="HeadingRunIn"><span></span>Sequences and Counters</h5><p id="ww1211148" class="Body"><span></span>Sequences are sequential states connected by THEN or NEXT operators. A counter counts how many times a state must occur before a THEN or NEXT statement or the end of the sequence. The maximum value of this count is determined by the Max Event Counter value. This value must be specified in Reveal Inserter and cannot be changed in Reveal Analyzer.</p><p id="ww1211149" class="Body"><span></span>Here is an example of a trigger expression with a THEN operator:</p><pre id="ww1211150" class="Code">TU1 THEN TU2</pre><p id="ww1211151" class="Body"><span></span>This trigger expression is interpreted as “wait for TU1 to be true, then wait for TU2 to be true.”</p><p id="ww1211152" class="Body"><span></span>If the same example were written with a NEXT operator:</p><pre id="ww1211153" class="Code">TU1 NEXT TU2</pre><p id="ww1211154" class="Body"><span></span>it is interpreted as “wait for TU1 to be true, then wait <em class="Emphasis">one clock cycle</em> for TU2 to be true.” If TU2 is not true in the next clock cycle, the sequence fails and starts over, waiting for TU1 again.</p><p id="ww1211155" class="Body"><span></span>The next trigger expression:</p><pre id="ww1211156" class="Code">TU1 THEN TU2 #2</pre><p id="ww1211157" class="Body"><span></span>is interpreted as “wait for TU1 to be true, then wait for TU2 to be true for two sample clocks.” TU2 may be true on consecutive or non-consecutive sample clocks and still meet this condition.</p><p id="ww1211158" class="Body"><span></span>The following statement:</p><pre id="ww1211159" class="Code">TU1 ##5 THEN TU2</pre><p id="ww1211160" class="Body"><span></span>means that TU1 must occur for five consecutive sample clocks before TU2 is evaluated. If there are any extra delays between any of the five occurrences of TU1, the sequence fails and starts over.</p><p id="ww1211161" class="Body"><span></span>The next expression:</p><pre id="ww1211162" class="Code">(TU1 &amp; TU2)#2 THEN TU3</pre><p id="ww1211163" class="Body"><span></span>means “wait for the second occurrence of TU1 and TU2 to be true, then wait for TU3.”</p><p id="ww1211164" class="Body"><span></span>The last expression:</p><pre id="ww1211165" class="Code">TU1 THEN (1)#200</pre><p id="ww1211166" class="Body"><span></span>means “wait for TU1 to be true, then wait for 200 sample clocks.” This expression is useful if you know that an event occurs a certain time after a condition.</p><p id="ww1211167" class="Body"><span></span>You can only use one count (# or ##) operator per sequence. For example, the following statement is not valid, because it uses two counts in a sequence:</p><pre id="ww1211168" class="Code">TU1 #5 &amp; TU2 #2</pre><p id="ww1211169" class="Body"><span></span>Multiple count values are allowed for a single trigger expression, but only one per sequence. For two count operators to be valid in a trigger expression, the expression must contain at least one THEN or NEXT operator, as in the following example:</p><pre id="ww1211170" class="Code">(TU1 &amp; TU2) #5 THEN TU2 #2</pre><p id="ww1211171" class="Body"><span></span>This expression means “wait for TU1 and TU2 to be true for five sample clocks, then wait for TU2 to be true for two sample clocks.”</p><p id="ww1211172" class="Body"><span></span>Also, the count operator must be applied to the entire sequence expression, as indicated by parentheses in the expression just given. The following is not allowed:</p><pre id="ww1211173" class="Code">TU1 #5 &amp; TU2 THEN TU2 #2</pre><p id="ww1211174" class="Body"><span></span>The count (#) operator cannot be used as part of a sequence following a NEXT operator. A consecutive count (##) operator may be used after a NEXT operator. The following is not allowed:</p><pre id="ww1211175" class="Code">TU1 NEXT TU2 #2</pre><p id="ww1211176" class="Body"><span></span>The count (# or ##) operators can only be used in one of two areas:</p><div id="ww1211177" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>Immediately after a trigger unit or parentheses (). However, if the trigger unit is combined with another trigger unit without parentheses, a # cannot be used.</div><div id="ww1211178" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>After a closing parenthesis.</div><h5 id="ww1211180" class="HeadingRunIn"><span></span>Precedence</h5><p id="ww1211181" class="BodyAfterHead"><span></span>The symbols used in trigger expression syntax take the following precedence:</p><div id="ww1211182" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>Because it inserts a sequence, the THEN and NEXT operators always take the highest precedence in trigger expressions.</div><div id="ww1211183" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>Between THEN or NEXT statements, the order is defined by parentheses that you insert. For example, the following trigger expression:</div><pre id="ww1211184" class="CodeIndented">TU1 &amp; (TU2|TU3)</pre><div id="ww1211185" class="Indented">means “wait for either TU1 and TU2 or TU1 and TU3 to be true.”</div><div id="ww1211186" class="Indented">If you do not place any parentheses in the trigger expression, precedence is left to right until a THEN or NEXT statement is reached.</div><div id="ww1211187" class="Indented">For example, the following trigger expression:</div><pre id="ww1211188" class="CodeIndented">TU1 &amp; TU2|TU3</pre><div id="ww1211189" class="Indented">is interpreted as “wait for TU1 &amp; TU2 to be true or wait for TU3 to be true.”</div><div id="ww1211190" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>The precedence of the ^ operator is same as that of the &amp; operator and the | operator.</div><div id="ww1211191" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>The logic negation operator (!) has a higher precedence than the ^ operator, &amp; operator, or | operator, for example:</div><pre id="ww1211192" class="CodeIndented">!TU1 &amp; TU2</pre><div id="ww1211193" class="Indented">means “not TU1 and TU2.”</div><div id="ww1211194" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>The # and ## operators have the same precedence as the ^ operator, &amp; operator, or | operator. However, they can only be used in one of two areas:</div><div id="ww1211195" class="BulletedIndented"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../bullet2nd.png" alt="*" border="0" width="7" height="7" /></span></span>Immediately after a trigger unit or trigger units combined in parentheses. However, if the trigger unit is combined with another trigger unit without parentheses, a # or ## operator cannot be used.</div><p id="ww1211196" class="Indented2">Here is an example of correct syntax using the count (#) operator:</p><pre id="ww1211197" class="CodeIndented2">TU1 #2 THEN TU3</pre><p id="ww1211198" class="Indented2">This statement means “wait for TU1 to be true for two sample clocks, then wait for TU3.”</p><p id="ww1211199" class="Indented2">However, the following syntax is incorrect, because the count operator is applied to multiple trigger units combined without parentheses:</p><pre id="ww1211200" class="CodeIndented2">TU1 &amp; TU2#2 THEN TU3</pre><div id="ww1211201" class="BulletedIndented"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../bullet2nd.png" alt="*" border="0" width="7" height="7" /></span></span>After a closing parenthesis. Use parentheses to combine multiple trigger units and then apply a count, as in the following example:</div><pre id="ww1211202" class="CodeIndented2">(TU1 &amp; TU2)#2 THEN TU3</pre><p id="ww1211203" class="Indented2">This statement means “wait for the combination of TU1 and TU2 to be true for two sample clocks, then wait for TU3.”</p><h5 id="ww1189781" class="HeadingRunIn"><span></span>See Also</h5><div id="ww1189785" class="Portal"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span><a href="../../User%20Guides/On-Chip%20Debugging/example_trigger_expr_RA.htm#ww1189742" title="Example Trigger Expressions">Example Trigger Expressions</a></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>