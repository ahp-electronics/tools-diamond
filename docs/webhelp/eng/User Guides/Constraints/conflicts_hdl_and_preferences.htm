<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Conflicting HDL Attributes, Constraints, and Preferences</title><link rel="Prev" href="conflicting_iobuf_constraints.htm" title="Previous" /><link rel="Next" href="changes_to_net_names.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/design_imp_1.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pI1h_002f8N8GrcbKqpgcPUgMTg" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/User%20Guides/Constraints/conflicts_hdl_and_preferences.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Getting%20Startred/Getting_Started.htm">User Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Applying_Design_Constraints.htm#1452519">Applying Design Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="using%20preferences.htm#1452519">Using Preferences</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="preference_conflict_resolution.htm#1452519">Preference Conflict Resolution</a> &gt; Conflicting HDL Attributes, Constraints, and Preferences</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1452519" class="Heading3"><span></span>Conflicting HDL Attributes, Constraints, and Preferences</h4><p id="ww1452520" class="BodyAfterHead"><span></span>Using a combination of HDL attributes and preferences is a powerful technique for constraining the implementation tools. However, it is possible to introduce a combination of HDL attributes and logical preferences that are redundant and in conflict with each other. When such conflicts occur, the preference in the .lpf file takes precedence.</p><h5 id="ww1425357" class="HeadingRunIn"><span></span>Conflicting Pin Assignments:</h5><p id="ww1425358" class="Body"><span></span>When there is a conflicting pin assignment between the HDL and the preference file, the assignment in the preference file will take precedence. For example, SPI_PIN_D has a LOC attribute of W25 in the source file. Later, in Spreadsheet View, the pin is assigned to site U21 and saved to the .lpf file. When the design is placed and routed, the U21 location is honored instead of the W25 assignment. The only way to return to the original W25 site assignment is to delete the LOCATE preference from the .lpf file.</p><p id="ww1543714" class="Body"><span></span>The following is an HDL example of conflicting pin assignments:</p><p id="ww1543793" class="Body"><span></span>Input SPI_PIN_D /* synthesis LOC = “W25” */; </p><p id="ww1548142" class="Body"><span></span>The following is an LPF example of conflicting pin assignments, which overrites HDL:</p><p id="ww1543850" class="Body"><span></span>LOCATE COMP “SPI_PIN_D” U21; (this is LPF, it over-rides HDL))</p><p id="ww1425359" class="Body"><span></span>The same is true for IOBUF attributes. For example, the HDL assigns “my_signal” to L5 with OPENDRAIN set to ON. Later, OPENDRAIN is changed to OFF in Spreadsheet View. The pin assignment remains at L5, and the OPENDRAIN setting of OFF is honored.</p><p id="ww1459785" class="Body"><span></span>See <span class="Hyperlink"><a href="../../User%20Guides/Constraints/conflicting_iobuf_constraints.htm#ww1451735" title="Conflicting IOBUF Constraints">Conflicting IOBUF Constraints</a></span></p><h5 id="ww1423577" class="HeadingRunIn"><span></span>Redundant UGROUP Declarations</h5><p id="ww1412855" class="BodyAfterHead"><span></span>In the following example, two group preferences with the same name contain different members:</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption style="caption-side: top"></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1412860" class="Code">UGROUP "Group_0"</pre><pre id="ww1412861" class="Code">    BLKNAME reg0</pre><pre id="ww1412862" class="Code">    BLKNAME reg1;</pre><pre id="ww1412863" class="Code">UGROUP "Group_0"</pre><pre id="ww1412864" class="Code">    BLKNAME reg2</pre><pre id="ww1412865" class="Code">    BLKNAME reg3;</pre></td></tr></table></div><p id="ww1101993" class="Body"><span></span>When the design is mapped, the first occurrence of Group_0, with members reg0 and reg1, is ignored. Warnings will appear in the output log and in the map report.</p><p id="ww1101994" class="BodyAfterHead"><span></span>The following example contains two group preferences with different names that contain the same members.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption style="caption-side: top"></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1101999" class="Code">UGROUP "Group_1"</pre><pre id="ww1102000" class="Code">    BLKNAME reg6</pre><pre id="ww1102001" class="Code">    BLKNAME reg7;</pre><pre id="ww1102002" class="Code">UGROUP "Group_2"</pre><pre id="ww1102003" class="Code">    BLKNAME reg6</pre><pre id="ww1102004" class="Code">    BLKNAME reg7;</pre></td></tr></table></div><p id="ww1102005" class="Body"><span></span>When the design is mapped, Group_1 is ignored because its members conflict with the membership declared in Group_2 that appears second. Warnings will appear in the output log and in the map report.</p><h5 id="ww1102006" class="HeadingRunIn"><span></span>Conflict between UGROUP and LOCATE COMP</h5><p id="ww1102007" class="BodyAfterHead"><span></span>The following example contains a combination of group and location preferences that conflict:</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption style="caption-side: top"></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1102012" class="Code">UGROUP "Group_0" BBOX 9 9 </pre><pre id="ww1102013" class="Code">	BLKNAME I1</pre><pre id="ww1102014" class="Code">	BLKNAME I2;</pre><pre id="ww1102015" class="Code">LOCATE UGROUP "Group_0" SITE "EBR_R36C6" ;</pre><pre id="ww1102016" class="Code">LOCATE COMP "I1/pdp_ram_0" SITE "EBR_R36C22" ;</pre></td></tr></table></div><p id="ww1102017" class="Body"><span></span>The Group_0 contains two blocks of the design. One element of block I1, an embedded block RAM (EBR) named pdp_ram_0, is placed at a specific EBR device site (EBR_R3C22) using the LOCATE preference. </p><p id="ww1102018" class="Body"><span></span>Because LOCATE is more specific than a UGROUP preference, when the place and route program encounters this condition, it honors the LOCATE preference. It does not necessarily place pdp_ram_0 in proximity to the other members of Group_0. No warnings or errors are generated.</p><p id="ww1102019" class="Body"><span></span>The following example contains a member (ip_ram_dq_0_1_0) that has a LOCATE preference. This results in the removal of this member from the UGROUP during placement. The LOCATE preference for this member will not influence the placement of the other members of the UGROUP, because this member has been removed from the UGROUP.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption style="caption-side: top"></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1102024" class="Code">UGROUP "grp1"</pre><pre id="ww1102025" class="Code">        BLKNAME ip_ram_dq_0_0_1</pre><pre id="ww1102026" class="Code">        BLKNAME ip_ram_dq_0_1_0;</pre><pre id="ww1102027" class="Code">LOCATE UGROUP "grp1" REGION "region_1" ;</pre><pre id="ww1102028" class="Code">LOCATE COMP "ip_ram_dq_0_1_0" SITE "EBR_R29C8" ;</pre></td></tr></table></div><p id="ww1102029" class="Body"><span></span>The UGROUP “grp1” will continue to be put in “region_1”, but grp_1 now only has the single member: ip_ram_dq_0_0_1. The element ip_ram_dq_0_1_0 will be placed at site “EBR_R29C8”.</p><h5 id="ww1102030" class="HeadingRunIn"><span></span>Redundant DEFINE GROUP Declarations</h5><p id="ww1102031" class="BodyAfterHead"><span></span>Resolution of conflicting DEFINE GROUP preferences, such as port groups, is not handled consistently across all programs. The style of declaration shown in the following example should be avoided. It contains port groups that have the same name but contain different members.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption style="caption-side: top"></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1102036" class="Code">DEFINE PORT GROUP "Group_0" <br />"d0(0)" <br />"d0(1)" ;<br />DEFINE PORT GROUP "Group_0" <br />"d0(2)" <br />"d0(3)" ;<br />INPUT_SETUP GROUP "Group_0"INPUT_DELAY 5.000000 ns HOLD 3.000000 ns CLKPORT "CLK" ;</pre></td></tr></table></div><p id="ww1102037" class="Body"><span></span>The first occurrence of Group_0 with members d0(0) and d0(1) is ignored by the preference views, however, the second occurrence of Group_0 with member d0(2) and d0(3) is ignored by the TRACE (trce) and PAR programs. Both groups are passed into the physical preference file by map. Ignored groups are not reported by the system in this example.</p><h5 id="ww1185183" class="HeadingRunIn"><span></span>See Also</h5><div id="ww1563524" class="Portal"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span><span class="Hyperlink"><a href="../../User%20Guides/Constraints/The_Logical_Preference_File.htm#ww1493207" title="The Logical Preference File">The Logical Preference File</a></span></div><div id="ww1563528" class="Portal"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span><span class="Hyperlink"><a href="../../User%20Guides/Constraints/physical_preference_file.htm#ww1548508" title="The Physical Preference File">The Physical Preference File</a></span></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>