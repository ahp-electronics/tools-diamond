<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Inferring RAM with Synchronous Read</title><link rel="Prev" href="inferring_ram.htm" title="Previous" /><link rel="Next" href="inferring_ram_dual_port.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/srceditor.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pPT4axhxX8XWJ4hJUEdzsAA" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/User%20Guides/Design%20Entry/inferring_ram_synch_read.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Getting%20Startred/Getting_Started.htm">User Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="performing_design_entry.htm#1093409">Entering the Design</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="hdl_design_entry.htm#1093409">HDL Design Entry</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="LSE_coding_tips.htm#1093409">Coding Tips for Lattice Synthesis Engine (LSE)</a> &gt; Inferring RAM with Synchronous Read</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1093409" class="Heading3"><span></span>Inferring RAM with Synchronous Read</h4><p id="ww1093410" class="BodyAfterHead"><span></span>For synchronous reads, add a register for the read address or for the data output. Load the register inside the procedure or process that is controlled by the clock. See the following examples. They show the simple RAM of <span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093330" title="Inferring RAM">this figure</a></span> (for Verilog) and <span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093351" title="Inferring RAM">this figure</a></span> (for VHDL) modified for synchronous reads. Changes are in bold text.</p><h5 id="ww1094271" class="DropDown" onclick="WebWorks_ToggleDIV('ww1094271')"><span></span>Verilog Examples <span id="ww1094271:dd:arrow" class="ww_skin ww_skin_dropdown_arrow ww_skin_page_dropdown_arrow_collapsed"><i class="fa"></i></span></h5><div id="ww1094271:dd" class="ww_skin_page_dropdown_div_collapsed"><p id="ww1094277" class="Body"><span></span> </p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093419" class="FigureTitle">RAM with Registered Output in Verilog</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093421" class="Code">module ram (din, addr, write_en, clk, dout);</pre><pre id="ww1093422" class="Code">&nbsp;&nbsp;parameter addr_width = 8;</pre><pre id="ww1093423" class="Code">&nbsp;&nbsp;parameter data_width = 8;</pre><pre id="ww1093424" class="Code">&nbsp;&nbsp;input [addr_width-1:0] addr;</pre><pre id="ww1093425" class="Code">&nbsp;&nbsp;input [data_width-1:0] din;</pre><pre id="ww1093426" class="Code">&nbsp;&nbsp;input write_en, clk;</pre><pre id="ww1093427" class="Code">&nbsp;&nbsp;output [data_width-1:0] dout;</pre><pre id="ww1093428" class="Code">&nbsp;&nbsp;<span class="GUI">reg [data_width-1:0] dout;</span> <span class="GUI">// Register for output.</span></pre><pre id="ww1093429" class="Code">&nbsp;&nbsp;reg [data_width-1:0] mem [(1&lt;&lt;addr_width)-1:0];</pre><pre id="ww1093430" class="Code">&nbsp;</pre><pre id="ww1093431" class="Code">&nbsp;&nbsp;always @(posedge clk)</pre><pre id="ww1093432" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093433" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (write_en)</pre><pre id="ww1093434" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem[(addr)] &lt;= din;</pre><pre id="ww1093435" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">dout = mem[addr];</span> <span class="GUI">// Output register controlled by clock.</span></pre><pre id="ww1093436" class="Code">&nbsp;&nbsp;end</pre><pre id="ww1093437" class="Code">endmodule</pre></td></tr></table></div><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093440" class="FigureTitle">RAM with Registered Read Address in Verilog</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093442" class="Code">module ram (din, addr, write_en, clk, dout);</pre><pre id="ww1093443" class="Code">&nbsp;&nbsp;parameter addr_width = 8;</pre><pre id="ww1093444" class="Code">&nbsp;&nbsp;parameter data_width = 8;</pre><pre id="ww1093445" class="Code">&nbsp;&nbsp;input [addr_width-1:0] addr;</pre><pre id="ww1093446" class="Code">&nbsp;&nbsp;input [data_width-1:0] din;</pre><pre id="ww1093447" class="Code">&nbsp;&nbsp;input write_en, clk;</pre><pre id="ww1093448" class="Code">&nbsp;&nbsp;output [data_width-1:0] dout;</pre><pre id="ww1093449" class="Code">&nbsp;&nbsp;<span class="GUI">reg [data_width-1:0] raddr;</span> <span class="GUI">// Register for read address.</span></pre><pre id="ww1093450" class="Code">&nbsp;&nbsp;reg [data_width-1:0] mem [(1&lt;&lt;addr_width)-1:0];</pre><pre id="ww1093451" class="Code">&nbsp;</pre><pre id="ww1093452" class="Code">&nbsp;&nbsp;always @(posedge clk)</pre><pre id="ww1093453" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093454" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (write_en)</pre><pre id="ww1093455" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;begin</pre><pre id="ww1093456" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem[(addr)] &lt;= din;</pre><pre id="ww1093457" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end</pre><pre id="ww1093458" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">raddr &lt;= addr;</span> <span class="GUI">// Read addr. register controlled by clock.</span></pre><pre id="ww1093459" class="Code">&nbsp;&nbsp;end</pre><pre id="ww1093460" class="Code">&nbsp;&nbsp;assign dout = mem[<span class="GUI">raddr</span>];</pre><pre id="ww1093461" class="Code">endmodule</pre></td></tr></table></div></div><h5 id="ww1094272" class="DropDown" onclick="WebWorks_ToggleDIV('ww1094272')"><span></span>VHDL Examples <span id="ww1094272:dd:arrow" class="ww_skin ww_skin_dropdown_arrow ww_skin_page_dropdown_arrow_collapsed"><i class="fa"></i></span></h5><div id="ww1094272:dd" class="ww_skin_page_dropdown_div_collapsed"><p id="ww1094278" class="Body"><span></span> </p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093464" class="FigureTitle">RAM with Registered Output in VHDL</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093466" class="Code">library IEEE;</pre><pre id="ww1093467" class="Code">use IEEE.std_logic_1164.all;</pre><pre id="ww1093468" class="Code">use IEEE.std_logic_unsigned.all;</pre><pre id="ww1093469" class="Code">&nbsp;</pre><pre id="ww1093470" class="Code">entity ram is</pre><pre id="ww1093471" class="Code">generic (</pre><pre id="ww1093472" class="Code">&nbsp;&nbsp;addr_width : natural := 8;</pre><pre id="ww1093473" class="Code">&nbsp;&nbsp;data_width : natural := 8);</pre><pre id="ww1093474" class="Code">port (</pre><pre id="ww1093475" class="Code">&nbsp;&nbsp;addr : in  std_logic_vector (addr_width - 1 downto 0);</pre><pre id="ww1093476" class="Code">&nbsp;&nbsp;write_en : in  std_logic; </pre><pre id="ww1093477" class="Code">&nbsp;&nbsp;clk : in  std_logic; </pre><pre id="ww1093478" class="Code">&nbsp;&nbsp;din : in  std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093479" class="Code">&nbsp;&nbsp;dout : out std_logic_vector (data_width - 1 downto 0));</pre><pre id="ww1093480" class="Code">end ram;</pre><pre id="ww1093481" class="Code">&nbsp;</pre><pre id="ww1093482" class="Code">architecture rtl of ram is</pre><pre id="ww1093483" class="Code">&nbsp;&nbsp;type mem_type is array ((2** addr_width) - 1 downto 0) of </pre><pre id="ww1093484" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector(data_width - 1 downto 0);</pre><pre id="ww1093485" class="Code">&nbsp;&nbsp;signal mem : mem_type;</pre><pre id="ww1093486" class="Code">begin</pre><pre id="ww1093487" class="Code">&nbsp;&nbsp;process (clk)</pre><pre id="ww1093488" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093489" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (clk'event and clk = '1') then</pre><pre id="ww1093490" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write_en = '1') then</pre><pre id="ww1093491" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem(conv_integer(addr)) &lt;= din;</pre><pre id="ww1093492" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093493" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093494" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">dout &lt;= mem(conv_integer(addr));</span></pre><pre id="ww1093495" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">-- Output register controlled by clock.</span></pre><pre id="ww1093496" class="Code">&nbsp;&nbsp;end process;</pre><pre id="ww1093497" class="Code">end rtl;</pre></td></tr></table></div><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093500" class="FigureTitle">RAM with Registered Read Address in VHDL</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093502" class="Code">library IEEE;</pre><pre id="ww1093503" class="Code">use IEEE.std_logic_1164.all;</pre><pre id="ww1093504" class="Code">use IEEE.std_logic_unsigned.all;</pre><pre id="ww1093505" class="Code">&nbsp;</pre><pre id="ww1093506" class="Code">entity ram is</pre><pre id="ww1093507" class="Code">generic (</pre><pre id="ww1093508" class="Code">&nbsp;&nbsp;addr_width : natural := 8;</pre><pre id="ww1093509" class="Code">&nbsp;&nbsp;data_width : natural := 8);</pre><pre id="ww1093510" class="Code">port (</pre><pre id="ww1093511" class="Code">&nbsp;&nbsp;addr : in  std_logic_vector (addr_width - 1 downto 0);</pre><pre id="ww1093512" class="Code">&nbsp;&nbsp;write_en : in  std_logic; </pre><pre id="ww1093513" class="Code">&nbsp;&nbsp;clk : in  std_logic; </pre><pre id="ww1093514" class="Code">&nbsp;&nbsp;din : in  std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093515" class="Code">&nbsp;&nbsp;dout : out std_logic_vector (data_width - 1 downto 0));</pre><pre id="ww1093516" class="Code">end ram;</pre><pre id="ww1093517" class="Code">&nbsp;</pre><pre id="ww1093518" class="Code">architecture rtl of ram is</pre><pre id="ww1093519" class="Code">&nbsp;&nbsp;type mem_type is array ((2** addr_width) - 1 downto 0) of </pre><pre id="ww1093520" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector(data_width - 1 downto 0);</pre><pre id="ww1093521" class="Code">&nbsp;&nbsp;signal mem : mem_type;</pre><pre id="ww1093522" class="Code">begin</pre><pre id="ww1093523" class="Code">&nbsp;&nbsp;process (clk)</pre><pre id="ww1093524" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093525" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (clk'event and clk = '1') then</pre><pre id="ww1093526" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write_en = '1') then</pre><pre id="ww1093527" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem(conv_integer(addr)) &lt;= din;</pre><pre id="ww1093528" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093529" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">raddr &lt;= addr;</span></pre><pre id="ww1093530" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">-- Read address register controlled by clock.</span></pre><pre id="ww1093531" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093532" class="Code">&nbsp;&nbsp;end process;</pre><pre id="ww1093533" class="Code">&nbsp;&nbsp;dout &lt;= mem(conv_integer(<span class="GUI">raddr</span>));</pre><pre id="ww1093534" class="Code">end rtl;</pre></td></tr></table></div></div><h5 id="ww1094805" class="HeadingRunIn"><span></span>See Also</h5><div id="ww1094810" class="Portal" style="vertical-align: baseline"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span><span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093319" title="Inferring RAM">Inferring RAM</a></span></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>