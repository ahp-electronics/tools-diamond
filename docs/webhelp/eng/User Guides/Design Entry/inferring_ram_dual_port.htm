<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Inferring Dual-Port RAM</title><link rel="Prev" href="inferring_ram_synch_read.htm" title="Previous" /><link rel="Next" href="inferring_ram_initializing.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/srceditor.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pr4pN6GqH0C8_002bTIvhkxGHVw" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/User%20Guides/Design%20Entry/inferring_ram_dual_port.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Getting%20Startred/Getting_Started.htm">User Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="performing_design_entry.htm#1093536">Entering the Design</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="hdl_design_entry.htm#1093536">HDL Design Entry</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="LSE_coding_tips.htm#1093536">Coding Tips for Lattice Synthesis Engine (LSE)</a> &gt; Inferring Dual-Port RAM</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1093536" class="Heading3"><span></span>Inferring Dual-Port RAM</h4><p id="ww1093537" class="BodyAfterHead"><span></span>For dual-port RAM, pseudo or true:</p><div id="ww1093538" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>Use two address buses.</div><div id="ww1093539" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>If the design does not simultaneously read and write the same address, add the syn_ramstyle attribute with the no_rw_check value to minimize overhead logic.</div><div id="ww1093542" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>If writing in Verilog, use non-blocking assignments as described in <span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/blocking_assignments.htm#ww1093794" title="About Verilog Blocking Assignments">About Verilog Blocking Assignments</a></span>.</div><p id="ww1093547" class="Body"><span></span>The following examples are based on the simple RAM of <span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093330" title="Inferring RAM">this figure</a></span> (for Verilog) and <span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093351" title="Inferring RAM">this figure</a></span> (for VHDL).</p><h5 id="ww1094282" class="DropDown" onclick="WebWorks_ToggleDIV('ww1094282')"><span></span>Verilog ExamplesÂ <span id="ww1094282:dd:arrow" class="ww_skin ww_skin_dropdown_arrow ww_skin_page_dropdown_arrow_collapsed"><i class="fa"></i></span></h5><div id="ww1094282:dd" class="ww_skin_page_dropdown_div_collapsed"><p id="ww1094283" class="Body"><span></span> </p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093553" class="FigureTitle">Pseudo Dual-Port RAM in Verilog</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093555" class="Code">module ram (din, write_en, <span class="GUI">waddr, wclk, raddr, rclk,</span> dout);</pre><pre id="ww1093556" class="Code">&nbsp;&nbsp;parameter addr_width = 8;</pre><pre id="ww1093557" class="Code">&nbsp;&nbsp;parameter data_width = 8;</pre><pre id="ww1093558" class="Code">&nbsp;&nbsp;input [addr_width-1:0] <span class="GUI">waddr, raddr</span>;</pre><pre id="ww1093559" class="Code">&nbsp;&nbsp;input [data_width-1:0] din;</pre><pre id="ww1093560" class="Code">&nbsp;&nbsp;input write_en, <span class="GUI">wclk, rclk</span>;</pre><pre id="ww1103564" class="Code">&nbsp;&nbsp;output [data_width-1:0] dout;</pre><pre id="ww1093561" class="Code">&nbsp;&nbsp;<span class="GUI">reg [data_width-1:0] dout;</span></pre><pre id="ww1093562" class="Code">&nbsp;&nbsp;reg [data_width-1:0] mem [(1&lt;&lt;addr_width)-1:0]</pre><pre id="ww1093563" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">/* synthesis syn_ramstyle = "no_rw_check" */</span> ;</pre><pre id="ww1093564" class="Code">&nbsp;</pre><pre id="ww1093565" class="Code">&nbsp;&nbsp;always @(posedge <span class="GUI">wclk</span>) <span class="GUI">// Write memory.</span></pre><pre id="ww1093566" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093567" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (write_en)</pre><pre id="ww1093568" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem[<span class="GUI">waddr</span>] &lt;= din; <span class="GUI">// Using write address bus.</span></pre><pre id="ww1093569" class="Code">&nbsp;&nbsp;end</pre><pre id="ww1093570" class="Code">&nbsp;&nbsp;<span class="GUI">always @(posedge rclk)</span> <span class="GUI">// Read memory.</span></pre><pre id="ww1093571" class="Code">&nbsp;&nbsp;<span class="GUI">begin</span></pre><pre id="ww1093572" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;dout &lt;= mem[<span class="GUI">raddr</span>]; <span class="GUI">// Using read address bus.</span></pre><pre id="ww1093573" class="Code">&nbsp;&nbsp;<span class="GUI">end</span></pre><pre id="ww1093574" class="Code">endmodule</pre></td></tr></table></div><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093577" class="FigureTitle">True Dual-Port RAM in Verilog</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093579" class="Code">module ram (<span class="GUI">dina, write_ena, addra, clka, douta, </span></pre><pre id="ww1093580" class="Code"><span class="GUI">&nbsp;&nbsp;dinb, write_enb, addrb, clkb, doutb</span>);</pre><pre id="ww1093581" class="Code">&nbsp;&nbsp;parameter addr_width = 8;</pre><pre id="ww1093582" class="Code">&nbsp;&nbsp;parameter data_width = 8;</pre><pre id="ww1093583" class="Code">&nbsp;&nbsp;input [addr_width-1:0] <span class="GUI">addra, addrb</span>;</pre><pre id="ww1093584" class="Code">&nbsp;&nbsp;input [data_width-1:0] <span class="GUI">dina, dinb</span>;</pre><pre id="ww1093585" class="Code">&nbsp;&nbsp;input <span class="GUI">write_ena, clka, write_enb, clkb</span>;</pre><pre id="ww1103579" class="Code">&nbsp;&nbsp;output [data_width-1:0] douta, doutb;</pre><pre id="ww1093586" class="Code">&nbsp;&nbsp;<span class="GUI">reg [data_width-1:0] douta, doutb;</span></pre><pre id="ww1093587" class="Code">&nbsp;&nbsp;reg [data_width-1:0] mem [(1&lt;&lt;addr_width)-1:0]</pre><pre id="ww1093588" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">/* synthesis syn_ramstyle = "no_rw_check" */</span> ;</pre><pre id="ww1093589" class="Code">&nbsp;</pre><pre id="ww1093590" class="Code">&nbsp;&nbsp;always @(posedge <span class="GUI">clka</span>) <span class="GUI">// Using port a.</span></pre><pre id="ww1093591" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093592" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (<span class="GUI">write_ena</span>)</pre><pre id="ww1093593" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem[<span class="GUI">addra</span>] &lt;= <span class="GUI">dina</span>; <span class="GUI">// Using address bus a.</span></pre><pre id="ww1093594" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">douta</span> &lt;= mem[<span class="GUI">addra</span>];</pre><pre id="ww1093595" class="Code">&nbsp;&nbsp;end</pre><pre id="ww1093596" class="Code">&nbsp;&nbsp;<span class="GUI">always @(posedge clkb)</span> <span class="GUI">// Using port b.</span></pre><pre id="ww1093597" class="Code">&nbsp;&nbsp;<span class="GUI">begin</span></pre><pre id="ww1093598" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">if (write_enb)</span></pre><pre id="ww1093599" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">mem[addrb] &lt;= dinb;</span> <span class="GUI">// Using address bus b.</span></pre><pre id="ww1093600" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">doutb &lt;= mem[addrb];</span></pre><pre id="ww1093601" class="Code">&nbsp;&nbsp;<span class="GUI">end</span></pre><pre id="ww1093602" class="Code">endmodule</pre></td></tr></table></div></div><h5 id="ww1094287" class="DropDown" onclick="WebWorks_ToggleDIV('ww1094287')"><span></span>VHDL ExamplesÂ <span id="ww1094287:dd:arrow" class="ww_skin ww_skin_dropdown_arrow ww_skin_page_dropdown_arrow_collapsed"><i class="fa"></i></span></h5><div id="ww1094287:dd" class="ww_skin_page_dropdown_div_collapsed"><p id="ww1094289" class="Body"><span></span> </p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093605" class="FigureTitle">Pseudo Dual-Port RAM in VHDL</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093607" class="Code">library IEEE;</pre><pre id="ww1093608" class="Code">use IEEE.std_logic_1164.all;</pre><pre id="ww1093609" class="Code">use IEEE.std_logic_unsigned.all;</pre><pre id="ww1093610" class="Code">&nbsp;</pre><pre id="ww1093611" class="Code">entity ram is</pre><pre id="ww1093612" class="Code">generic (</pre><pre id="ww1093613" class="Code">&nbsp;&nbsp;addr_width : natural := 8;</pre><pre id="ww1093614" class="Code">&nbsp;&nbsp;data_width : natural := 8);</pre><pre id="ww1093615" class="Code">port (</pre><pre id="ww1093616" class="Code">&nbsp;&nbsp;write_en : in  std_logic;</pre><pre id="ww1093617" class="Code">&nbsp;&nbsp;<span class="GUI">waddr</span> : in  std_logic_vector (addr_width - 1 downto 0);</pre><pre id="ww1093618" class="Code">&nbsp;&nbsp;<span class="GUI">wclk</span> : in  std_logic;</pre><pre id="ww1093619" class="Code">&nbsp;&nbsp;<span class="GUI">raddr : in  std_logic_vector (addr_width - 1 downto 0);</span></pre><pre id="ww1093620" class="Code">&nbsp;&nbsp;<span class="GUI">rclk : in  std_logic;</span></pre><pre id="ww1093621" class="Code">&nbsp;&nbsp;din : in  std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093622" class="Code">&nbsp;&nbsp;dout : out std_logic_vector (data_width - 1 downto 0));</pre><pre id="ww1093623" class="Code">end ram;</pre><pre id="ww1093624" class="Code">&nbsp;</pre><pre id="ww1093625" class="Code">architecture rtl of ram is</pre><pre id="ww1093626" class="Code">&nbsp;&nbsp;type mem_type is array ((2** addr_width) - 1 downto 0) of </pre><pre id="ww1093627" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector(data_width - 1 downto 0);</pre><pre id="ww1093628" class="Code">&nbsp;&nbsp;signal mem : mem_type;</pre><pre id="ww1093629" class="Code">&nbsp;&nbsp;<span class="GUI">attribute syn_ramstyle: string;</span></pre><pre id="ww1093630" class="Code">&nbsp;&nbsp;<span class="GUI">attribute syn_ramstyle of mem: signal is "no_rw_check";</span></pre><pre id="ww1093631" class="Code">begin</pre><pre id="ww1093632" class="Code">&nbsp;&nbsp;process (<span class="GUI">wclk</span>) -- Write memory.</pre><pre id="ww1093633" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093634" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (<span class="GUI">wclk</span>'event and <span class="GUI">wclk</span> = '1') then</pre><pre id="ww1093635" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write_en = '1') then</pre><pre id="ww1093636" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem(conv_integer(<span class="GUI">waddr</span>)) &lt;= din;</pre><pre id="ww1093637" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">-- Using write address bus.</span></pre><pre id="ww1093638" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093639" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093640" class="Code">&nbsp;&nbsp;end process;</pre><pre id="ww1093641" class="Code">&nbsp;&nbsp;<span class="GUI">process (rclk)</span> <span class="GUI">-- Read memory.</span></pre><pre id="ww1093642" class="Code">&nbsp;&nbsp;<span class="GUI">begin</span></pre><pre id="ww1093643" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">if (rclk'event and rclk = '1') then</span></pre><pre id="ww1093644" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dout &lt;= mem(conv_integer(<span class="GUI">raddr</span>));</pre><pre id="ww1093645" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Using read address bus.</pre><pre id="ww1093646" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093647" class="Code">&nbsp;&nbsp;end process;</pre><pre id="ww1093648" class="Code">end rtl;</pre></td></tr></table></div><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><caption class="FigureTitle" style="caption-side: top"><div id="ww1093651" class="FigureTitle">True Dual-Port RAM in VHDL</div></caption><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1093653" class="Code">library IEEE;</pre><pre id="ww1093654" class="Code">use IEEE.std_logic_1164.all;</pre><pre id="ww1093655" class="Code">use IEEE.std_logic_unsigned.all;</pre><pre id="ww1093656" class="Code">&nbsp;</pre><pre id="ww1093657" class="Code">entity ram is</pre><pre id="ww1093658" class="Code">generic (</pre><pre id="ww1093659" class="Code">&nbsp;&nbsp;addr_width : natural := 8;</pre><pre id="ww1093660" class="Code">&nbsp;&nbsp;data_width : natural := 8);</pre><pre id="ww1093661" class="Code">port (</pre><pre id="ww1093662" class="Code">&nbsp;&nbsp;<span class="GUI">addra</span> : in  std_logic_vector (addr_width - 1 downto 0);</pre><pre id="ww1093663" class="Code">&nbsp;&nbsp;<span class="GUI">write_ena</span> : in  std_logic;</pre><pre id="ww1093664" class="Code">&nbsp;&nbsp;<span class="GUI">clka</span> : in  std_logic;</pre><pre id="ww1093665" class="Code">&nbsp;&nbsp;<span class="GUI">dina</span> : in  std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093666" class="Code">&nbsp;&nbsp;<span class="GUI">douta</span> : out std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093667" class="Code">&nbsp;&nbsp;<span class="GUI">addrb</span> : in  std_logic_vector (addr_width - 1 downto 0);</pre><pre id="ww1093668" class="Code">&nbsp;&nbsp;<span class="GUI">write_enb</span> : in  std_logic;</pre><pre id="ww1093669" class="Code">&nbsp;&nbsp;<span class="GUI">clkb</span> : in  std_logic;</pre><pre id="ww1093670" class="Code">&nbsp;&nbsp;<span class="GUI">dinb</span> : in  std_logic_vector (data_width - 1 downto 0);</pre><pre id="ww1093671" class="Code">&nbsp;&nbsp;<span class="GUI">doutb</span> : out std_logic_vector (data_width - 1 downto 0));</pre><pre id="ww1093672" class="Code">end ram;</pre><pre id="ww1093673" class="Code">&nbsp;</pre><pre id="ww1093674" class="Code">architecture rtl of ram is</pre><pre id="ww1093675" class="Code">&nbsp;&nbsp;type mem_type is array ((2** addr_width) - 1 downto 0) of </pre><pre id="ww1093676" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector(data_width - 1 downto 0);</pre><pre id="ww1093677" class="Code">&nbsp;&nbsp;signal mem : mem_type;</pre><pre id="ww1093678" class="Code">&nbsp;&nbsp;<span class="GUI">attribute syn_ramstyle: string;</span></pre><pre id="ww1093679" class="Code">&nbsp;&nbsp;<span class="GUI">attribute syn_ramstyle of mem: signal is "no_rw_check";</span></pre><pre id="ww1093680" class="Code">begin</pre><pre id="ww1093681" class="Code">&nbsp;&nbsp;process (<span class="GUI">clka</span>) <span class="GUI">-- Using port a.</span></pre><pre id="ww1093682" class="Code">&nbsp;&nbsp;begin</pre><pre id="ww1093683" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;if (<span class="GUI">clka</span>'event and <span class="GUI">clka</span> = '1') then</pre><pre id="ww1093684" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (<span class="GUI">write_ena</span> = '1') then</pre><pre id="ww1093685" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem(conv_integer(<span class="GUI">addra</span>)) &lt;= <span class="GUI">dina</span>;</pre><pre id="ww1093686" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">-- Using address bus a.</span></pre><pre id="ww1093687" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093688" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">douta</span> &lt;= mem(conv_integer(<span class="GUI">addra</span>));</pre><pre id="ww1093689" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;end if;</pre><pre id="ww1093690" class="Code">&nbsp;&nbsp;end process;</pre><pre id="ww1093691" class="Code">&nbsp;&nbsp;<span class="GUI">process (clkb)</span> <span class="GUI">-- Using port b.</span></pre><pre id="ww1093692" class="Code">&nbsp;&nbsp;<span class="GUI">begin</span></pre><pre id="ww1093693" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">if (clkb'event and clkb = '1') then</span></pre><pre id="ww1093694" class="Code" style="vertical-align: baseline"><span class="GUI">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write_enb = '1') then</span></pre><pre id="ww1093695" class="Code" style="vertical-align: baseline"><span class="GUI">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem(conv_integer(addrb)) &lt;= dinb;</span></pre><pre id="ww1093696" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">-- Using address bus b.</span></pre><pre id="ww1093697" class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="GUI">end if;</span></pre><pre id="ww1093698" class="Code" style="vertical-align: baseline"><span class="GUI">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doutb &lt;= mem(conv_integer(addrb));</span></pre><pre id="ww1093699" class="Code" style="vertical-align: baseline"><span class="GUI">&nbsp;&nbsp;&nbsp;&nbsp;end if;</span></pre><pre id="ww1093700" class="Code" style="vertical-align: baseline"><span class="GUI">&nbsp;&nbsp;end process;</span></pre><pre id="ww1093701" class="Code">end rtl;</pre></td></tr></table></div></div><h5 id="ww1094796" class="HeadingRunIn"><span></span>See Also</h5><div id="ww1094801" class="Portal" style="vertical-align: baseline"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span><span class="Hyperlink"><a href="../../User%20Guides/Design%20Entry/inferring_ram.htm#ww1093319" title="Inferring RAM">Inferring RAM</a></span></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>