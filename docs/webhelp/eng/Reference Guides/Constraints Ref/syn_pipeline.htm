<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>syn_pipeline</title><link rel="Prev" href="syn_noprune_hdl_directive.htm" title="Previous" /><link rel="Next" href="syn_preserve_hdl_directive.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/lse_constraints_directives.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pqJM0UNUtqs2MlCAY1hoSGA" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/Reference%20Guides/Constraints%20Ref/syn_pipeline.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Strategies/strategy_settings.htm">Reference Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Constraints_Reference_Guide.htm#1014546">Constraints Reference Guide</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="lattice_synthesis_engine_constraints.htm#1014546">Lattice Synthesis Engine (LSE) Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="HDL%20Attributes%20and%20Directives.htm#1014546">Lattice Synthesis Engine-Supported HDL Attributes</a> &gt; syn_pipeline</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1014546" class="Heading3"><span></span>syn_pipeline</h4><p id="ww1014547" class="BodyAfterHead"><span></span>This attribute permits registers to be moved to improve timing. Specifies that registers that are outputs of Multipliers/Adders can be moved to improve timing. Depending on the criticality of the path, the tool moves the output register to the input side.</p><h5 id="ww1014548" class="HeadingRunIn"><span></span>Verilog Syntax</h5><p id="ww1014549" class="BodyAfterHead"><span></span>object /* synthesis syn_pipeline = {1 | 0} */ ;</p><p id="ww1019404" class="Body"><span></span>where <span style="font-style: italic">object</span> is a register declaration. </p><p id="ww1019406" class="Body"><span></span>The value of 0 (or false) indicates pipelining for the specified register is disabled, which means the register position in the design is fixed.</p><p id="ww1019408" class="Body"><span></span>The value of 1 (or true) indicates pipelining for the specified register is allowed, which means the register may be moved if it helps improve timing.</p><p id="ww1019410" class="Body"><span></span>LSE will identify registers that are candidates for possible pipelining based on running RTL timing analysis. It may identify some candidate registers, or it may determine there are none that are suitable.</p><p id="ww1019412" class="Body"><span></span>If LSE decides no candidate registers for pipelining exist, if the user sets the syn_pipeline attribute to “1” on a specific register in the RTL to force pipelining for that register, that attribute will not be honored.</p><p id="ww1019414" class="Body"><span></span>If global pipelining is enabled for a design, and given one or more registers that LSE has identified as possible candidates for pipelining, the user may prevent these registers from being pipelined by setting synthesis attribute syn_pipeline=0 for each of those registers in the RTL.</p><h5 id="ww1016804" class="HeadingRunIn"><span></span>Verilog Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1019460" class="Code">module pipeline (a,b,c,d,clk,out); </pre><pre id="ww1019461" class="Code">&nbsp;</pre><pre id="ww1019462" class="Code">input [3:0] a,b,c,d; </pre><pre id="ww1019463" class="Code">input clk;</pre><pre id="ww1019464" class="Code">output[7:0]out;</pre><pre id="ww1019465" class="Code"> </pre><pre id="ww1019466" class="Code">reg[7:0]out,out1 /* synthesis syn_pipeline = 0 */; </pre><pre id="ww1019467" class="Code">reg[3:0] a_temp,b_temp,c_temp,d_temp; </pre><pre id="ww1019468" class="Code">&nbsp;</pre><pre id="ww1019469" class="Code">always @(posedge clk)</pre><pre id="ww1019470" class="Code">begin </pre><pre id="ww1019471" class="Code">   a_temp &lt;= a; </pre><pre id="ww1019472" class="Code">   b_temp &lt;= b; </pre><pre id="ww1019473" class="Code">   c_temp &lt;= c; </pre><pre id="ww1019474" class="Code">   d_temp &lt;= d; </pre><pre id="ww1019475" class="Code">   out1 &lt;= (a_temp * b_temp) +(c_temp * d_temp); </pre><pre id="ww1019476" class="Code">   out &lt;= out1; </pre><pre id="ww1019477" class="Code">end</pre><pre id="ww1019478" class="Code">endmodule </pre></td></tr></table></div><p id="ww1019504" class="Body"><span></span>In the previous example, the registers labeled “out1” will not be moved to the input side of the adder to improve timing.</p><h5 id="ww1019505" class="HeadingRunIn"><span></span>VHDL Syntax</h5><p id="ww1014551" class="BodyAfterHead"><span></span>attribute syn_pipeline of object : objectType is {true|false} ;</p><h5 id="ww1016882" class="HeadingRunIn"><span></span>VHDL Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1038017" class="Code">library ieee;</pre><pre id="ww1038018" class="Code">use ieee.std_logic_1164.all;</pre><pre id="ww1038019" class="Code">USE ieee.numeric_std.all;</pre><pre id="ww1038020" class="Code">use ieee.std_logic_unsigned.all;</pre><pre id="ww1038021" class="Code">&nbsp;</pre><pre id="ww1038022" class="Code">entity syn_pipeline_exp is</pre><pre id="ww1038023" class="Code">port (CLK_0 : in std_logic;</pre><pre id="ww1038024" class="Code">		A_IN : in std_logic_vector(3 downto 0);</pre><pre id="ww1038025" class="Code">		B_IN : in std_logic_vector(3 downto 0);</pre><pre id="ww1038026" class="Code">		RST : out std_logic_vector(7 downto 0)</pre><pre id="ww1038027" class="Code">  	  );</pre><pre id="ww1038028" class="Code">end syn_pipeline_exp;</pre><pre id="ww1038029" class="Code">&nbsp;</pre><pre id="ww1038030" class="Code">architecture rtl of syn_pipeline_exp is</pre><pre id="ww1038031" class="Code">signal A_REGSTR : std_logic_vector(3 downto 0);</pre><pre id="ww1038032" class="Code">signal B_REGSTR : std_logic_vector(3 downto 0);</pre><pre id="ww1038033" class="Code">signal TMP : std_logic_vector(7 downto 0);</pre><pre id="ww1038034" class="Code">signal TMP1 : std_logic_vector(7 downto 0);</pre><pre id="ww1038035" class="Code">signal TMP2 : std_logic_vector(7 downto 0);</pre><pre id="ww1038036" class="Code">attribute syn_pipeline : string;</pre><pre id="ww1038037" class="Code">attribute syn_pipeline of TMP1 : signal is "true";</pre><pre id="ww1038038" class="Code">&nbsp;</pre><pre id="ww1038039" class="Code">begin</pre><pre id="ww1038040" class="Code">	process(CLK_0)</pre><pre id="ww1038041" class="Code">	begin</pre><pre id="ww1038042" class="Code">		if (CLK_0'event and CLK_0 = '1') then</pre><pre id="ww1038043" class="Code">			TMP &lt;= A_REGSTR * B_REGSTR;</pre><pre id="ww1038044" class="Code">			A_REGSTR &lt;= A_IN;</pre><pre id="ww1038045" class="Code">			B_REGSTR &lt;= B_IN;</pre><pre id="ww1038046" class="Code">			TMP1 &lt;= TMP;</pre><pre id="ww1038047" class="Code">			TMP2 &lt;= TMP1;</pre><pre id="ww1038048" class="Code">			RST &lt;= TMP2;</pre><pre id="ww1038049" class="Code">		end if;</pre><pre id="ww1038050" class="Code">	end process;</pre><pre id="ww1038051" class="Code">	</pre><pre id="ww1016912" class="Code">end rtl;</pre></td></tr></table></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>