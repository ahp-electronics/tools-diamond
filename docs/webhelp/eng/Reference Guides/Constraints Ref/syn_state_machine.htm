<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>syn_state_machine</title><link rel="Prev" href="syn_sharing.htm" title="Previous" /><link rel="Next" href="syn_use_carry_chain_hdl_attribute.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/lse_constraints_directives.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pGSDJggO_002fD_002fN7_002bvJpRNyQ1Q" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/Reference%20Guides/Constraints%20Ref/syn_state_machine.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Strategies/strategy_settings.htm">Reference Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Constraints_Reference_Guide.htm#1023198">Constraints Reference Guide</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="lattice_synthesis_engine_constraints.htm#1023198">Lattice Synthesis Engine (LSE) Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="HDL%20Attributes%20and%20Directives.htm#1023198">Lattice Synthesis Engine-Supported HDL Attributes</a> &gt; syn_state_machine</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1023198" class="Heading3"><span></span>syn_state_machine</h4><p id="ww1019849" class="BodyAfterHead"><span></span>This attribute enables/disables state-machine optimization on individual state registers in the design. To extract some state machines, use this attribute with a value of 1 on just those individual state-registers to be extracted. If there are state machines in your design that you do not want extracted, use syn_state_machine with a value of 0 to override extraction on just those individual state registers.</p><p id="ww1019850" class="BodyAfterHead"><span></span>All state machines are usually detected during synthesis. However, on occasion there are cases in which certain state machines are not detected. You can use this attribute to declare those undetected registers as state machines.</p><p id="ww1033608" class="Body"><span></span>The syn_sharing attribute only can be used in architecture. The syn_sharing attribute cannot be used in entity.</p><h5 id="ww1016117" class="HeadingRunIn"><span></span>Verilog Syntax</h5><p id="ww1016127" class="Body"><span></span>object /* synthesis syn_state_machine = 0 | 1 */ ;</p><p id="ww1016243" class="Body"><span></span>where <span style="font-style: italic">object </span>is a state register. Data type is Boolean: 0 does not extract an FSM, 1 extracts an FSM.</p><h5 id="ww1019667" class="HeadingRunIn"><span></span>Verilog Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1038328" class="Code">module syn_state_machine1 (clk, reset, en, q);</pre><pre id="ww1038329" class="Code">	input clk, reset, en;</pre><pre id="ww1038330" class="Code">	output[1:0]q;</pre><pre id="ww1038331" class="Code">	reg q;</pre><pre id="ww1038332" class="Code">	reg [3:0] state,next_state /* synthesis syn_state_machine = 0 */;</pre><pre id="ww1038333" class="Code">	parameter state0 = 4'b1000;</pre><pre id="ww1038334" class="Code">	parameter state1 = 4'b0100;</pre><pre id="ww1038335" class="Code">	parameter state2 = 4'b0010; </pre><pre id="ww1038336" class="Code">	parameter state3 = 4'b0001;</pre><pre id="ww1038337" class="Code">	always @(posedge clk or posedge reset)</pre><pre id="ww1038338" class="Code">		begin</pre><pre id="ww1038339" class="Code">			if (reset)</pre><pre id="ww1038340" class="Code">					state &lt;= state0;</pre><pre id="ww1038341" class="Code">			else</pre><pre id="ww1038342" class="Code">				state &lt;= next_state;</pre><pre id="ww1038343" class="Code">		end</pre><pre id="ww1038344" class="Code">		</pre><pre id="ww1038345" class="Code">	always @(state)</pre><pre id="ww1038346" class="Code">		begin</pre><pre id="ww1038347" class="Code">			case (state)</pre><pre id="ww1038348" class="Code">				state0: </pre><pre id="ww1038349" class="Code">					begin</pre><pre id="ww1038350" class="Code">						if (en == 1) </pre><pre id="ww1038351" class="Code">							q &lt;= 2'b00;</pre><pre id="ww1038352" class="Code">						next_state &lt;= state1;</pre><pre id="ww1038353" class="Code">					end</pre><pre id="ww1038354" class="Code">						</pre><pre id="ww1038355" class="Code">				state1:</pre><pre id="ww1038356" class="Code">					begin</pre><pre id="ww1038357" class="Code">						if (en == 1) </pre><pre id="ww1038358" class="Code">							q &lt;= 2'b01;</pre><pre id="ww1038359" class="Code">						next_state &lt;= state2;</pre><pre id="ww1038360" class="Code">					end</pre><pre id="ww1038361" class="Code">				state2:</pre><pre id="ww1038362" class="Code">					begin</pre><pre id="ww1038363" class="Code">						if (en == 1) </pre><pre id="ww1038364" class="Code">							q &lt;= 2'b10;</pre><pre id="ww1038365" class="Code">						next_state &lt;= state3;</pre><pre id="ww1038366" class="Code">					end</pre><pre id="ww1038367" class="Code">				state3: </pre><pre id="ww1038368" class="Code">					begin</pre><pre id="ww1038369" class="Code">						if (en == 1) </pre><pre id="ww1038370" class="Code">							q &lt;= 2'b11;</pre><pre id="ww1038371" class="Code">						next_state &lt;= state0;</pre><pre id="ww1038372" class="Code">					end</pre><pre id="ww1038373" class="Code">			endcase</pre><pre id="ww1038374" class="Code">		end</pre><pre id="ww1019844" class="Code">endmodule</pre></td></tr></table></div><h5 id="ww1019846" class="HeadingRunIn"><span></span>VHDL Syntax</h5><p id="ww1016653" class="Body"><span></span>attribute syn_state_machine of object : objectType is true | false ;</p><p id="ww1016649" class="Body"><span></span>where <span style="font-style: italic">object</span> is a signal that holds the value of the state machine.</p><h5 id="ww1016671" class="HeadingRunIn"><span></span>VHDL Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1016693" class="Code">attribute syn_state_machine of current_state: signal is true;</pre></td></tr></table></div><p id="ww1016712" class="Body"><span></span>Following is the source code used for the example in the previous figure.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1038390" class="Code">library ieee;</pre><pre id="ww1038391" class="Code">use ieee.std_logic_1164.all;</pre><pre id="ww1038392" class="Code">entity syn_statemachine_exp is</pre><pre id="ww1038393" class="Code">port (CLK_0, RESET, IN1 : in std_logic;</pre><pre id="ww1038394" class="Code">                   OUT1 : out std_logic_vector (2 downto 0)</pre><pre id="ww1038395" class="Code">      );</pre><pre id="ww1038396" class="Code">end syn_statemachine_exp;</pre><pre id="ww1038397" class="Code">&nbsp;</pre><pre id="ww1038398" class="Code">architecture behave of syn_statemachine_exp is</pre><pre id="ww1038399" class="Code">type ST_VALS is (STATE0, STATE1, STATE2, STATE3);</pre><pre id="ww1038400" class="Code">signal STATE, NXT_ST: ST_VALS;</pre><pre id="ww1038401" class="Code">attribute syn_state_machine : boolean;</pre><pre id="ww1038402" class="Code">attribute syn_state_machine of STATE : signal is true;</pre><pre id="ww1038403" class="Code">&nbsp;</pre><pre id="ww1038404" class="Code">begin</pre><pre id="ww1038405" class="Code">	process (CLK_0, RESET)</pre><pre id="ww1038406" class="Code">	begin</pre><pre id="ww1038407" class="Code">		if RESET = '1' then</pre><pre id="ww1038408" class="Code">			STATE &lt;= STATE0;</pre><pre id="ww1038409" class="Code">		elsif rising_edge(CLK_0) then</pre><pre id="ww1038410" class="Code">			STATE &lt;= NXT_ST;</pre><pre id="ww1038411" class="Code">		end if;</pre><pre id="ww1038412" class="Code">	end process;</pre><pre id="ww1038413" class="Code">&nbsp;</pre><pre id="ww1038414" class="Code">	process (STATE, IN1) </pre><pre id="ww1038415" class="Code">	begin</pre><pre id="ww1038416" class="Code">		case STATE is</pre><pre id="ww1038417" class="Code">			when STATE0 =&gt;</pre><pre id="ww1038418" class="Code">				OUT1 &lt;= "000";</pre><pre id="ww1038419" class="Code">				if IN1 = '1' then NXT_ST &lt;= STATE1;</pre><pre id="ww1038420" class="Code">				else NXT_ST &lt;= STATE0;</pre><pre id="ww1038421" class="Code">				end if;</pre><pre id="ww1038422" class="Code">			when STATE1 =&gt;</pre><pre id="ww1038423" class="Code">				OUT1 &lt;= "001";</pre><pre id="ww1038424" class="Code">				if IN1 = '1' then NXT_ST &lt;= STATE2;</pre><pre id="ww1038425" class="Code">				else NXT_ST &lt;= STATE1;</pre><pre id="ww1038426" class="Code">				end if;</pre><pre id="ww1038427" class="Code">			when STATE2 =&gt;</pre><pre id="ww1038428" class="Code">				OUT1 &lt;= "010";</pre><pre id="ww1038429" class="Code">				if IN1 = '1' then NXT_ST &lt;= STATE3;</pre><pre id="ww1038430" class="Code">				else NXT_ST &lt;= STATE2;</pre><pre id="ww1038431" class="Code">				end if;</pre><pre id="ww1038432" class="Code">			when others =&gt;</pre><pre id="ww1038433" class="Code">				OUT1 &lt;= "XXX"; NXT_ST &lt;= STATE0;</pre><pre id="ww1038434" class="Code">		end case;</pre><pre id="ww1038435" class="Code">	end process;</pre><pre id="ww1038436" class="Code">	</pre><pre id="ww1016778" class="Code">end behave;</pre></td></tr></table></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>