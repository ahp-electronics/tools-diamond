<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>syn_multstyle</title><link rel="Prev" href="syn_maxfan_hdl_attribute.htm" title="Previous" /><link rel="Next" href="syn_noprune_hdl_directive.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/lse_constraints_directives.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pvlqbfvPW4i9WEAJPUJaR6Q" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/Reference%20Guides/Constraints%20Ref/syn_multstyle.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Strategies/strategy_settings.htm">Reference Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Constraints_Reference_Guide.htm#1037071">Constraints Reference Guide</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="lattice_synthesis_engine_constraints.htm#1037071">Lattice Synthesis Engine (LSE) Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="HDL%20Attributes%20and%20Directives.htm#1037071">Lattice Synthesis Engine-Supported HDL Attributes</a> &gt; syn_multstyle</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1037071" class="Heading3"><span></span>syn_multstyle</h4><p id="ww1024816" class="BodyAfterHead"><span></span>This attribute specifies whether the multipliers are implemented as dedicated hardware blocks or as logic.</p><h5 id="ww1014453" class="HeadingRunIn"><span></span>syn_multstyle Values</h5><p id="ww1014454" class="Body"><span></span>block_mult | logic</p><h5 id="ww1014455" class="HeadingRunIn"><span></span>Value Description Default</h5><p id="ww1014456" class="Body"><span></span>block_mult Implements the multipliers as dedicated hardware blocks (Lattice: DSP blocks)</p><p id="ww1014457" class="Body"><span></span>This attribute only applies to families that use DSP blocks on the device. To override this behavior, specify a value of logic.</p><h5 id="ww1014470" class="HeadingRunIn"><span></span>Verilog Syntax </h5><p id="ww1014471" class="Body"><span></span>input net /* synthesis syn_multstyle = "block_mult | logic" */;</p><h5 id="ww1014472" class="HeadingRunIn"><span></span>Verilog Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1037914" class="Code">module syn_multstyle1(</pre><pre id="ww1037915" class="Code">						input [7:0] in1,</pre><pre id="ww1037916" class="Code">						input [7:0] in2,</pre><pre id="ww1037917" class="Code">						input rst,</pre><pre id="ww1037918" class="Code">						input clk,</pre><pre id="ww1037919" class="Code">						output [15:0] result);					</pre><pre id="ww1037920" class="Code">							</pre><pre id="ww1037921" class="Code">	reg [7:0] temp1,temp2;</pre><pre id="ww1037922" class="Code">	reg [15:0] result;</pre><pre id="ww1037923" class="Code">	wire [15:0] product /*synthesis syn_multstyle = "logic"*/;</pre><pre id="ww1037924" class="Code">&nbsp;</pre><pre id="ww1037925" class="Code">	always@(posedge clk ,negedge rst)</pre><pre id="ww1037926" class="Code">		begin</pre><pre id="ww1037927" class="Code">			if(!rst)</pre><pre id="ww1037928" class="Code">				begin</pre><pre id="ww1037929" class="Code">					temp1 = 'b0;</pre><pre id="ww1037930" class="Code">					temp2 = 'b0;</pre><pre id="ww1037931" class="Code">				end</pre><pre id="ww1037932" class="Code">			else</pre><pre id="ww1037933" class="Code">				begin</pre><pre id="ww1037934" class="Code">					temp1  = in1;</pre><pre id="ww1037935" class="Code">					temp2  = in2;</pre><pre id="ww1037936" class="Code">				end</pre><pre id="ww1037937" class="Code">		end</pre><pre id="ww1037938" class="Code">&nbsp;</pre><pre id="ww1037939" class="Code">	assign product = temp1*temp2;</pre><pre id="ww1037940" class="Code">&nbsp;</pre><pre id="ww1037941" class="Code">	always@(posedge clk, negedge rst)</pre><pre id="ww1037942" class="Code">		begin</pre><pre id="ww1037943" class="Code">			if(!rst)</pre><pre id="ww1037944" class="Code">				begin</pre><pre id="ww1037945" class="Code">					result  = 'b0;</pre><pre id="ww1037946" class="Code">				end</pre><pre id="ww1037947" class="Code">			else</pre><pre id="ww1037948" class="Code">				begin</pre><pre id="ww1037949" class="Code">					result = product;</pre><pre id="ww1037950" class="Code">				end	</pre><pre id="ww1037951" class="Code">			end						</pre><pre id="ww1014485" class="Code">endmodule</pre></td></tr></table></div><h5 id="ww1014487" class="HeadingRunIn"><span></span>VHDL Syntax</h5><p id="ww1014488" class="Body"><span></span>attribute syn_multstyle of instance : signal is "block_mult | logic";</p><h5 id="ww1014489" class="HeadingRunIn"><span></span>VHDL Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1038583" class="Code">library ieee;</pre><pre id="ww1038584" class="Code">use ieee.std_logic_1164.all;</pre><pre id="ww1038585" class="Code">use ieee.std_logic_arith.all;</pre><pre id="ww1038586" class="Code">use ieee.std_logic_unsigned.all;</pre><pre id="ww1038587" class="Code">&nbsp;</pre><pre id="ww1038588" class="Code">entity mac_ecp4_m5678_09x09_ir_or_bit_up is generic (widtha : natural := 9;</pre><pre id="ww1038589" class="Code">         widthb : natural := 9);</pre><pre id="ww1038590" class="Code">port ( </pre><pre id="ww1038591" class="Code">      ina     : in  std_logic_vector (0 to widtha - 1);</pre><pre id="ww1038592" class="Code">      inb_0   : in  std_logic;</pre><pre id="ww1038593" class="Code">      inb_1   : in  std_logic;</pre><pre id="ww1038594" class="Code">      inb_2   : in  std_logic;</pre><pre id="ww1038595" class="Code">      inb_3   : in  std_logic;</pre><pre id="ww1038596" class="Code">      inb_4   : in  std_logic;</pre><pre id="ww1038597" class="Code">      inb_5   : in  std_logic;</pre><pre id="ww1038598" class="Code">      inb_6   : in  std_logic;</pre><pre id="ww1038599" class="Code">      inb_7   : in  std_logic;</pre><pre id="ww1038600" class="Code">      inb_8   : in  std_logic;</pre><pre id="ww1038601" class="Code">      clk     : in  std_logic; </pre><pre id="ww1038602" class="Code">      mout    : out  std_logic_vector (0 to widtha+widthb - 1));</pre><pre id="ww1038603" class="Code">	  attribute syn_multstyle : string;</pre><pre id="ww1038604" class="Code">	attribute syn_multstyle of mout: signal is "block_mult"; end mac_ecp4_m5678_09x09_ir_or_bit_up;</pre><pre id="ww1038605" class="Code">&nbsp;</pre><pre id="ww1038606" class="Code">architecture rtl of mac_ecp4_m5678_09x09_ir_or_bit_up is</pre><pre id="ww1038607" class="Code">signal mout_s     : std_logic_vector (0 to widtha+widthb - 1);</pre><pre id="ww1038608" class="Code">signal reg1_ina : std_logic_vector(0 to widtha - 1); signal reg1_inb : std_logic_vector(0 to widthb - 1); signal reg_mout : std_logic_vector(0 to widtha+widthb - 1);</pre><pre id="ww1038609" class="Code">signal inb     : std_logic_vector (0 to widthb - 1);</pre><pre id="ww1038610" class="Code">begin </pre><pre id="ww1038611" class="Code">&nbsp;</pre><pre id="ww1038612" class="Code">inb &lt;= inb_8 &amp; inb_7 &amp; inb_6 &amp; inb_5 &amp; inb_4 &amp; inb_3 &amp; inb_2 &amp; inb_1 &amp; inb_0 ;</pre><pre id="ww1038613" class="Code">&nbsp;</pre><pre id="ww1038614" class="Code"> reg_mout &lt;= reg1_ina * reg1_inb+mout_s;</pre><pre id="ww1038615" class="Code">  mout &lt;= mout_s;</pre><pre id="ww1038616" class="Code">&nbsp;</pre><pre id="ww1038617" class="Code">process (clk) begin</pre><pre id="ww1038618" class="Code">  if</pre><pre id="ww1038619" class="Code">   rising_edge (clk) then</pre><pre id="ww1038620" class="Code">      reg1_ina &lt;= ina;</pre><pre id="ww1038621" class="Code">      reg1_inb &lt;= inb;</pre><pre id="ww1038622" class="Code">      mout_s &lt;= reg_mout;</pre><pre id="ww1038623" class="Code">  end if;</pre><pre id="ww1038624" class="Code">end process;</pre><pre id="ww1038625" class="Code">&nbsp;</pre><pre id="ww1038626" class="Code">end rtl;</pre></td></tr></table></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>