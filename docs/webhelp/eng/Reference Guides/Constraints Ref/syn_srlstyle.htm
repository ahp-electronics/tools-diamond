<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>syn_srlstyle</title><link rel="Prev" href="syn_romstyle_hdl_attribute.htm" title="Previous" /><link rel="Next" href="syn_sharing.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/lse_constraints_directives.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pamOKNj8upOKp_002fO73dK2_002fYg" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/Reference%20Guides/Constraints%20Ref/syn_srlstyle.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Strategies/strategy_settings.htm">Reference Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Constraints_Reference_Guide.htm#1014688">Constraints Reference Guide</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="lattice_synthesis_engine_constraints.htm#1014688">Lattice Synthesis Engine (LSE) Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="HDL%20Attributes%20and%20Directives.htm#1014688">Lattice Synthesis Engine-Supported HDL Attributes</a> &gt; syn_srlstyle</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1014688" class="Heading3"><span></span>syn_srlstyle</h4><p id="ww1014689" class="BodyAfterHead"><span></span>This attribute determines how to implement the sequential shift components.</p><h5 id="ww1014742" class="HeadingRunIn"><span></span>Verilog Syntax</h5><p id="ww1019584" class="Body"><span></span>object /* synthesis syn_srlstyle = "string", </p><p id="ww1019604" class="Body"><span></span>where string can take one of the following values:</p><p id="ww1019586" class="Body"><span></span>registers: seqShift register components are implemented as registers.</p><p id="ww1019588" class="Body"><span></span>distributed: seqShift register components are implemented as distributed RAM.</p><p id="ww1019590" class="Body"><span></span>block_ram: seqShift register components are implemented as block RAM</p><p id="ww1014743" class="Body"><span></span>If the attribute value set by the user cannot be honored (for example, the user sets the attribute value to "block_ram", however, the selected device does not contain enough available EBR blocks to implement the shift register), LSE will display a message to indicate this.</p><p id="ww1014744" class="Body"><span></span>" | registers | distributed | |block_ram" */ ;</p><p id="ww1014745" class="Body"><span></span>In the above syntax, <span style="font-style: italic">object</span> is a register declaration.</p><h5 id="ww1014746" class="HeadingRunIn"><span></span>Verilog Example</h5><p id="ww1016064" class="Body"><span></span>The following example implements seqShift components as distributed memory with any required fabric logic.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1014751" class="Code">module test_srl(clk, enable, dataIn, result, addr);</pre><pre id="ww1014752" class="Code">input clk, enable;</pre><pre id="ww1014753" class="Code">input [3:0] dataIn;</pre><pre id="ww1014754" class="Code">input [3:0] addr;</pre><pre id="ww1014755" class="Code">output [3:0] result;</pre><pre id="ww1014756" class="Code">reg [3:0] regBank[15:0]</pre><pre id="ww1014757" class="Code">	/* synthesis syn_srlstyle="distributed" */;</pre><pre id="ww1014758" class="Code">integer i;</pre><pre id="ww1014759" class="Code">always @(posedge clk) begin</pre><pre id="ww1014760" class="Code">	if (enable == 1) begin</pre><pre id="ww1014761" class="Code">		for (i=15; i&gt;0; i=i-1) begin</pre><pre id="ww1014762" class="Code">			regBank[i] &lt;= regBank[i-1];</pre><pre id="ww1014763" class="Code">		end</pre><pre id="ww1014764" class="Code">	regBank[0] &lt;= dataIn;</pre><pre id="ww1014765" class="Code">	end</pre><pre id="ww1014766" class="Code">end</pre><pre id="ww1014767" class="Code">assign result = regBank[addr];</pre><pre id="ww1014768" class="Code">endmodule</pre></td></tr></table></div><p id="ww1014769" class="Body"><span></span>The following example implements a seqShift for 16x256 bits wide and serial in and serial out register using syn_srlstyle set to block_ram.</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1014774" class="Code">// shift left register with 16X256 bits width and serial in and</pre><pre id="ww1014775" class="Code">serial out</pre><pre id="ww1014776" class="Code">module test(clock, arst, sr_en, shiftin, shiftout);</pre><pre id="ww1014777" class="Code">parameter sh_len=16;</pre><pre id="ww1014778" class="Code">parameter sh_width=256;</pre><pre id="ww1014779" class="Code">parameter ARESET_VALUE = {(sh_width){1'b0}};</pre><pre id="ww1014780" class="Code">input clock,arst,sr_en;</pre><pre id="ww1014781" class="Code">input [sh_width-1:0] shiftin;</pre><pre id="ww1014782" class="Code">output [sh_width-1:0] shiftout;</pre><pre id="ww1014783" class="Code">integer i;</pre><pre id="ww1014784" class="Code">reg [sh_width-1:0] sreg [sh_len-1:0] /* synthesis</pre><pre id="ww1014785" class="Code">syn_srlstyle="block_ram" */;</pre><pre id="ww1014786" class="Code">	always @(posedge clock or posedge arst)</pre><pre id="ww1014787" class="Code">	begin</pre><pre id="ww1014788" class="Code">		if(arst)</pre><pre id="ww1014789" class="Code">			begin</pre><pre id="ww1014790" class="Code">				for(i = 0;i &lt;= sh_len-1;i = i+1)</pre><pre id="ww1014791" class="Code">				sreg[i] &lt;= ARESET_VALUE ;</pre><pre id="ww1014792" class="Code">			end</pre><pre id="ww1014793" class="Code">		else</pre><pre id="ww1014794" class="Code">	begin</pre><pre id="ww1014795" class="Code">		if(sr_en)</pre><pre id="ww1014796" class="Code">		begin</pre><pre id="ww1014797" class="Code">			sreg[0] &lt;= shiftin;</pre><pre id="ww1014798" class="Code">			for(i=sh_len-1;i&gt;0;i=i-1)</pre><pre id="ww1014799" class="Code">				sreg[i] &lt;= sreg[i-1];</pre><pre id="ww1014800" class="Code">			end</pre><pre id="ww1014801" class="Code">		end</pre><pre id="ww1014802" class="Code">	end</pre><pre id="ww1014803" class="Code">assign shiftout = sreg[sh_len-1];</pre><pre id="ww1014804" class="Code">endmodule</pre></td></tr></table></div><h5 id="ww1014805" class="HeadingRunIn"><span></span>VHDL Syntax</h5><p id="ww1014806" class="Body"><span></span>attribute syn_srlstyle of object : signal is</p><p id="ww1014807" class="Body"><span></span>" registers | distributed |block_ram " ;</p><p id="ww1014808" class="Body"><span></span>In the above syntax, object is a register. </p><h5 id="ww1014809" class="HeadingRunIn"><span></span>Verilog Example </h5><p id="ww1022912" class="BodyAfterHead"><span></span>The example below implements seqShift components as distributed memory primitives:</p><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1022917" class="Code">library ieee;</pre><pre id="ww1022918" class="Code">use ieee.std_logic_1164.all;</pre><pre id="ww1022919" class="Code">use ieee.std_logic_unsigned.all;</pre><pre id="ww1022920" class="Code">entity d_p is</pre><pre id="ww1022921" class="Code">	port (clk : in std_logic;</pre><pre id="ww1022922" class="Code">		data_out : out std_logic_vector(127 downto 0));</pre><pre id="ww1022923" class="Code">	end d_p;</pre><pre id="ww1022924" class="Code">&nbsp;</pre><pre id="ww1022925" class="Code">architecture rtl of d_p is</pre><pre id="ww1022926" class="Code">type dataAryType is array(3 downto 0) of</pre><pre id="ww1022927" class="Code">	std_logic_vector(127 downto 0);</pre><pre id="ww1022928" class="Code">signal h_data_pip_i : dataAryType;</pre><pre id="ww1022929" class="Code">attribute syn_srlstyle : string;</pre><pre id="ww1022930" class="Code">attribute syn_srlstyle of h_data_pip_i : signal</pre><pre id="ww1022931" class="Code">is "distributed";</pre><pre id="ww1022932" class="Code">begin</pre><pre id="ww1022933" class="Code">	process (Clk)</pre><pre id="ww1022934" class="Code">	begin</pre><pre id="ww1022935" class="Code">		if (Clk'Event And Clk = '1') then</pre><pre id="ww1022936" class="Code">			h_data_pip_i &lt;= (h_data_pip_i(2 DOWNTO 0)) &amp;</pre><pre id="ww1022937" class="Code">			h_data_pip_i(3);</pre><pre id="ww1022938" class="Code">		end if;</pre><pre id="ww1022939" class="Code">	end process;</pre><pre id="ww1022940" class="Code">data_out &lt;= h_data_pip_i(0);</pre><pre id="ww1022941" class="Code">end rtl;</pre></td></tr></table></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>