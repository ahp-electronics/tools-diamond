<!DOCTYPE html ><html xml:lang="en" lang="en" data-highlight-require-whitespace="false" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta http-equiv="Content-Style-Type" content="text/css" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>syn_encoding</title><link rel="Prev" href="syn_black_box_hdl_directive.htm" title="Previous" /><link rel="Next" href="syn_force_pads.htm" title="Next" /><link rel="StyleSheet" href="../../css/font-awesome/css/font-awesome.css" type="text/css" media="all" /><link rel="StyleSheet" href="css/lse_constraints_directives.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/webworks.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/skin.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/social.css" type="text/css" media="all" /><link rel="StyleSheet" href="../css/print.css" type="text/css" media="print" /><script type="text/javascript" src="../scripts/common.js"></script><script type="text/javascript" src="../scripts/page.js"></script><script type="text/javascript" src="../scripts/search-client.js"></script><script type="text/javascript" src="../scripts/unidata.js"></script><script type="text/javascript" src="../scripts/unibreak.js"></script><noscript><div id="noscript_padding"></div></noscript></head><body id="pYMKxDLdwepkISsNQLXw3dQ" class="ww_skin_page_body" onload="Page.OnLoad('../../index.htm#page/Reference%20Guides/Constraints%20Ref/syn_encoding_hdl_directive.htm');"><div id="ww_content_container"><header id="wwconnect_header"><div class="ww_skin_page_toolbar"><a class="ww_behavior_print ww_skin ww_skin_print" title="Print" href="#"><i class="fa"></i></a></div><!-- was this helpful button --><!--                         --><!-- Moved breadcrumbs to bottom of the header so that the print --><!-- button would float to the right of the breadcrumbs. --><!-- PH 4June2019 --><div class="ww_skin_breadcrumbs"><a class="WebWorks_Breadcrumb_Link" href="../Strategies/strategy_settings.htm">Reference Guides</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="Constraints_Reference_Guide.htm#1034094">Constraints Reference Guide</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="lattice_synthesis_engine_constraints.htm#1034094">Lattice Synthesis Engine (LSE) Constraints</a> &gt; <a class="WebWorks_Breadcrumb_Link" href="HDL%20Attributes%20and%20Directives.htm#1034094">Lattice Synthesis Engine-Supported HDL Attributes</a> &gt; syn_encoding</div></header><div id="page_content_container" style="background-color: White; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px"><div id="page_content"><h4 id="ww1034094" class="Heading3"><span></span>syn_encoding</h4><p id="ww1034095" class="BodyAfterHead"><span></span>This attribute specifies the encoding style for a finite state machine (FSM), overriding the default LSE encoding. The default encoding is based on the number of states in the FSM. This attribute takes effect only when LSE infers an FSM. This attribute has no effect when syn_state_machine is 0, which blocks inference of an FSM.</p><p id="ww1036348" class="Body"><span></span>Values for syn_encoding are as follows:</p><div id="ww1036349" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>sequential – More than one bit of the state register can change at a time, but because more than one bit can be hot, the value must be decoded to determine the state. For example: 000, 001, 010, 011, 100</div><div id="ww1036351" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>onehot – Only two bits of the state register change (one goes to 0; one goes to 1) and only one of the state registers is hot (driven by a 1) at a time. For example: 0001, 0010, 0100, 1000</div><div id="ww1036353" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>gray – Only one bit of the state register changes at a time, but because more than one bit can be hot, the value must be decoded to determine the state. For example: 000, 001, 011, 010, 110</div><div id="ww1036355" class="Indented">There can be no more than four states for gray encoding. If the FSM has more than four states, LSE switches to sequential encoding.</div><div id="ww1036356" class="Bulleted"><span class="WebWorks_Number" style="width: 16.56pt"><span><img src="../square.png" alt="*" border="0" width="7" height="7" /></span></span>safe – If the state machine enters an invalid state, additional logic will drive the state machine into its reset state. The design must have a defined reset state.</div><div id="ww1036358" class="Indented">Safe encoding can be combined with either sequential or onehot encoding (not with gray encoding) as in:</div><pre id="ww1036359" class="CodeIndented">syn_encoding = "safe,onehot"</pre><div id="ww1036360" class="Indented">If the safe value is given by itself, it combines with the encoding method of a preceding syn_encoding statement or the default method.</div><h5 id="ww1034097" class="HeadingRunIn"><span></span>Verilog Syntax</h5><p id="ww1034098" class="BodyAfterHead"><span></span>Object /* synthesis syn_encoding = "value" */;</p><p id="ww1036048" class="Body"><span></span>Where object is an enumerated type and value is from the list above.</p><h5 id="ww1034099" class="HeadingRunIn"><span></span>Verilog Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1037650" class="Code">l<code class="Code">ibrary ieee;</code></pre><pre id="ww1037651" class="Code"><code class="Code">use ieee.std_logic_1164.all;</code></pre><pre id="ww1037652" class="Code"><code class="Code">use ieee.std_logic_unsigned.all;</code></pre><pre id="ww1037653" class="Code">&nbsp;</pre><pre id="ww1037654" class="Code"><code class="Code">entity syn_state_machine2 is </code></pre><pre id="ww1037655" class="Code"><code class="Code">	port(</code></pre><pre id="ww1037656" class="Code"><code class="Code">		clk : in std_logic;</code></pre><pre id="ww1037657" class="Code"><code class="Code">		reset: in std_logic;</code></pre><pre id="ww1037658" class="Code"><code class="Code">		en   : in std_logic;</code></pre><pre id="ww1037659" class="Code"><code class="Code">		q  : out std_logic_vector(1 downto 0)</code></pre><pre id="ww1037660" class="Code"><code class="Code">		);</code></pre><pre id="ww1037661" class="Code">&nbsp;</pre><pre id="ww1037662" class="Code"><code class="Code">end entity;</code></pre><pre id="ww1037663" class="Code">&nbsp;</pre><pre id="ww1037664" class="Code"><code class="Code">architecture behave of syn_state_machine2 is  </code></pre><pre id="ww1037665" class="Code"><code class="Code">	type state_type is(state0,state1,state2,state3);</code></pre><pre id="ww1037666" class="Code"><code class="Code">	signal state,next_state:state_type;</code></pre><pre id="ww1037667" class="Code"><code class="Code">	attribute syn_state_machine : boolean;</code></pre><pre id="ww1037668" class="Code"><code class="Code">	attribute syn_state_machine of behave : architecture is true;	</code></pre><pre id="ww1037669" class="Code"><code class="Code">	attribute syn_encoding : string;</code></pre><pre id="ww1037670" class="Code"><code class="Code">	attribute syn_encoding of state,next_state: signal is "binary";</code></pre><pre id="ww1037671" class="Code"><code class="Code">begin </code></pre><pre id="ww1037672" class="Code"><code class="Code">	process(clk,reset)</code></pre><pre id="ww1037673" class="Code"><code class="Code">	begin</code></pre><pre id="ww1037674" class="Code"><code class="Code">		if reset = '1' then</code></pre><pre id="ww1037675" class="Code"><code class="Code">			state &lt;= state0;</code></pre><pre id="ww1037676" class="Code"><code class="Code">		elsif clk'event and clk = '1' then</code></pre><pre id="ww1037677" class="Code"><code class="Code">			state &lt;= next_state;		</code></pre><pre id="ww1037678" class="Code"><code class="Code">		end if;</code></pre><pre id="ww1037679" class="Code"><code class="Code">	end process;</code></pre><pre id="ww1037680" class="Code"><code class="Code">	process(state)</code></pre><pre id="ww1037681" class="Code"><code class="Code">	begin	</code></pre><pre id="ww1037682" class="Code"><code class="Code">		case state is </code></pre><pre id="ww1037683" class="Code"><code class="Code">			when state0 =&gt; </code></pre><pre id="ww1037684" class="Code"><code class="Code">				if (en = '1') then</code></pre><pre id="ww1037685" class="Code"><code class="Code">					 q &lt;= "00";</code></pre><pre id="ww1037686" class="Code"><code class="Code">				end if;</code></pre><pre id="ww1037687" class="Code"><code class="Code">				next_state &lt;= state1;</code></pre><pre id="ww1037688" class="Code"><code class="Code">			when state1=&gt; </code></pre><pre id="ww1037689" class="Code"><code class="Code">				if (en = '1') then</code></pre><pre id="ww1037690" class="Code"><code class="Code">					 q &lt;= "01";</code></pre><pre id="ww1037691" class="Code"><code class="Code">				end if;</code></pre><pre id="ww1037692" class="Code"><code class="Code">				next_state &lt;= state2;</code></pre><pre id="ww1037693" class="Code"><code class="Code">			when state2 =&gt;</code></pre><pre id="ww1037694" class="Code"><code class="Code">				if (en = '1') then</code></pre><pre id="ww1037695" class="Code"><code class="Code">					 q &lt;= "10";</code></pre><pre id="ww1037696" class="Code"><code class="Code">				end if;</code></pre><pre id="ww1037697" class="Code"><code class="Code">				next_state &lt;= state3;</code></pre><pre id="ww1037698" class="Code"><code class="Code">			when state3 =&gt;</code></pre><pre id="ww1037699" class="Code"><code class="Code">				if (en = '1') then</code></pre><pre id="ww1037700" class="Code"><code class="Code">					 q &lt;= "11";</code></pre><pre id="ww1037701" class="Code"><code class="Code">				end if;</code></pre><pre id="ww1037702" class="Code"><code class="Code">				next_state &lt;= state0;	</code></pre><pre id="ww1037703" class="Code"><code class="Code">		end case;	</code></pre><pre id="ww1037704" class="Code"><code class="Code">	end process;</code></pre><pre id="ww1034132" class="Code"><code class="Code">end behave</code></pre></td></tr></table></div><h5 id="ww1034134" class="HeadingRunIn"><span></span>VHDL Syntax </h5><p id="ww1034135" class="BodyAfterHead"><span></span>attribute syn_encoding of object: objectType is "value";</p><p id="ww1036491" class="Body"><span></span>Where object is an enumerated type and value is from the list above.</p><h5 id="ww1034137" class="HeadingRunIn"><span></span>VHDL Example</h5><div class="ww_skin_page_overflow"><table class="Code" cellspacing="0" summary=""><tr><td style="background-color: White; border-bottom-color: #E5E5E5; border-bottom-style: solid; border-bottom-width: 1px; border-left-style: none; border-right-color: #E5E5E5; border-right-style: solid; border-right-width: 0px; border-top-color: #a0a0a0; border-top-style: none; border-top-width: 1.0pt; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: top; width: 342pt"><pre id="ww1037738" class="Code">library ieee;</pre><pre id="ww1037739" class="Code">use ieee.std_logic_1164.all;</pre><pre id="ww1037740" class="Code">use ieee.std_logic_unsigned.all;</pre><pre id="ww1037741" class="Code">&nbsp;</pre><pre id="ww1037742" class="Code">entity syn_encoding1 is </pre><pre id="ww1037743" class="Code">	port(</pre><pre id="ww1037744" class="Code">		clk : in std_logic;</pre><pre id="ww1037745" class="Code">		reset: in std_logic;</pre><pre id="ww1037746" class="Code">		en   : in std_logic;</pre><pre id="ww1037747" class="Code">		q  : out std_logic_vector(1 downto 0)</pre><pre id="ww1037748" class="Code">		);</pre><pre id="ww1037749" class="Code">end entity;</pre><pre id="ww1037750" class="Code">&nbsp;</pre><pre id="ww1037751" class="Code">architecture behave of syn_encoding1 is </pre><pre id="ww1037752" class="Code">	signal state : std_logic_vector(3 downto 0);</pre><pre id="ww1037753" class="Code">	constant state0 : std_logic_vector(3 downto 0) := "1000"; </pre><pre id="ww1037754" class="Code">	constant state1 : std_logic_vector(3 downto 0) := "0100"; </pre><pre id="ww1037755" class="Code">	constant state2 : std_logic_vector(3 downto 0) := "0010"; </pre><pre id="ww1037756" class="Code">	constant state3 : std_logic_vector(3 downto 0) := "0001"; </pre><pre id="ww1037757" class="Code">	attribute syn_encoding : string;</pre><pre id="ww1037758" class="Code">	attribute syn_encoding of state : signal is "safe,onehot";</pre><pre id="ww1037759" class="Code">begin </pre><pre id="ww1037760" class="Code">	process(clk,reset,en)</pre><pre id="ww1037761" class="Code">	begin</pre><pre id="ww1037762" class="Code">		if reset = '1' then </pre><pre id="ww1037763" class="Code">			state &lt;= state0;</pre><pre id="ww1037764" class="Code">			q &lt;= "00";</pre><pre id="ww1037765" class="Code">		elsif clk'event and clk = '1' then </pre><pre id="ww1037766" class="Code">			case state is </pre><pre id="ww1037767" class="Code">				when state0 =&gt; </pre><pre id="ww1037768" class="Code">					if (en = '1') then</pre><pre id="ww1037769" class="Code">						 q &lt;= "00";</pre><pre id="ww1037770" class="Code">					end if;</pre><pre id="ww1037771" class="Code">					state &lt;= state1;</pre><pre id="ww1037772" class="Code">				when state1=&gt; </pre><pre id="ww1037773" class="Code">					if (en = '1') then</pre><pre id="ww1037774" class="Code">						 q &lt;= "01";</pre><pre id="ww1037775" class="Code">					end if;</pre><pre id="ww1037776" class="Code">					state &lt;= state2;</pre><pre id="ww1037777" class="Code">				when state2 =&gt;</pre><pre id="ww1037778" class="Code">					if (en = '1') then</pre><pre id="ww1037779" class="Code">						 q &lt;= "10";</pre><pre id="ww1037780" class="Code">					end if;</pre><pre id="ww1037781" class="Code">					state &lt;= state3;</pre><pre id="ww1037782" class="Code">				when state3 =&gt;</pre><pre id="ww1037783" class="Code">					if (en = '1') then</pre><pre id="ww1037784" class="Code">						 q &lt;= "11";</pre><pre id="ww1037785" class="Code">					end if;</pre><pre id="ww1037786" class="Code">					state &lt;= state0;	</pre><pre id="ww1037787" class="Code">				when others =&gt; null;</pre><pre id="ww1037788" class="Code">			end case;</pre><pre id="ww1037789" class="Code">		end if;	</pre><pre id="ww1037790" class="Code">	end process;</pre><pre id="ww1034194" class="Code">end behave</pre></td></tr></table></div></div><div id="page_dates"><div class="ww_skin_page_publish_date"></div></div><!-- Related Topics --><!--                --><footer><!-- Disqus --><!--        --><!-- Google Translation --><!--                    --><br /></footer></div></div><noscript><div id="noscript_warning">This site works best with JavaScript enabled</div></noscript></body></html>