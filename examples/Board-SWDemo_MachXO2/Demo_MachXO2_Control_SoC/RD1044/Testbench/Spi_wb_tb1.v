// --------------------------------------------------------------------
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
// --------------------------------------------------------------------
// Copyright (c) 2009 by Lattice Semiconductor Corporation
// --------------------------------------------------------------------
//
// Permission:
//
// Lattice Semiconductor grants permission to use this code for use
// in synthesis for any Lattice programmable logic product. Other
// use of this code, including the selling or duplication of any
// portion is strictly prohibited.
//
// Disclaimer:
//
// This VHDL or Verilog source code is intended as a design reference
// which illustrates how these types of functions can be implemented.
// It is the user's responsibility to verify their design for
// consistency and functionality through the use of formal
// verification methods. Lattice Semiconductor provides no warranty
// regarding the use or functionality of this code.
//
// --------------------------------------------------------------------
//
// Lattice Semiconductor Corporation
// 5555 NE Moore Court
// Hillsboro, OR 97214
// U.S.A
//
// TEL: 1-800-Lattice (USA and Canada)
// 503-268-8001 (other locations)
//
// web: http://www.latticesemi.com/
// email: techsupport@latticesemi.com
//
// --------------------------------------------------------------------
// Code Revision History :
// --------------------------------------------------------------------
// Ver: | Author |Mod. Date |Changes Made:
// V1.0 | J.D.   |01/28/09  |Initial ver
//
// --------------------------------------------------------------------

// TOOL:     vlog2tf
// DATE:     07-MAY-2008 01:08:42 
// TITLE:    Lattice Semiconductor Corporation
// MODULE:   spi
// DESIGN:   spi
// FILENAME: spi.tft
// PROJECT:  spi_m32
// VERSION:  2.0
// This file is auto generated by the ispLEVER


`timescale 1 ns / 100 ps

// Define Module for Test Fixture
module spi_tf();

// Inputs
    reg [7:0] SPI_ADR_I;
    reg [7:0] SPI_DAT_I;
    reg SPI_WE_I;
    reg SPI_CYC_I;
    reg SPI_STB_I;
    reg [3:0] SPI_SEL_I;
    reg [2:0] SPI_CTI_I;
    reg [1:0] SPI_BTE_I;
    reg SPI_LOCK_I;
    reg MISO_MASTER;
    reg MOSI_SLAVE;
    reg SS_N_SLAVE;
    reg SCLK_SLAVE;
    reg CLK_I;
    reg RST_I;


// Outputs
    wire [7:0] SPI_DAT_O;
    wire SPI_ACK_O;
    wire SPI_INT_O;
    wire SPI_ERR_O;
    wire SPI_RTY_O;
    wire MOSI_MASTER;
    wire [0:0] SS_N_MASTER;
    wire SCLK_MASTER;
    wire MISO_SLAVE;


// Bidirs


// Instantiate the UUT
// Please check and add your parameters manually
    spi UUT (
        .SPI_ADR_I(SPI_ADR_I), 
        .SPI_DAT_I(SPI_DAT_I), 
        .SPI_WE_I(SPI_WE_I), 
        .SPI_CYC_I(SPI_CYC_I), 
        .SPI_STB_I(SPI_STB_I), 
        .SPI_SEL_I(SPI_SEL_I), 
        .SPI_CTI_I(SPI_CTI_I), 
        .SPI_BTE_I(SPI_BTE_I), 
        .SPI_LOCK_I(SPI_LOCK_I), 
        .SPI_DAT_O(SPI_DAT_O), 
        .SPI_ACK_O(SPI_ACK_O), 
        .SPI_INT_O(SPI_INT_O), 
        .SPI_ERR_O(SPI_ERR_O), 
        .SPI_RTY_O(SPI_RTY_O), 
        .MISO_MASTER(MISO_MASTER), 
        .MOSI_MASTER(MOSI_MASTER), 
        .SS_N_MASTER(SS_N_MASTER), 
        .SCLK_MASTER(SCLK_MASTER), 
        .MISO_SLAVE(MISO_SLAVE), 
        .MOSI_SLAVE(MOSI_SLAVE), 
        .SS_N_SLAVE(SS_N_SLAVE), 
        .SCLK_SLAVE(SCLK_SLAVE), 
        .CLK_I(CLK_I), 
        .RST_I(RST_I)
        );

PUR     PUR_INST (RST_I) ;
GSR 	GSR_INST (RST_I) ;

// Initialize Inputs
// You can add your stimulus here
    initial begin
            SPI_ADR_I = 0;
            SPI_DAT_I = 0;
            SPI_WE_I = 0;
            SPI_CYC_I = 0;
            SPI_STB_I = 0;
            SPI_SEL_I = 0;
            SPI_CTI_I = 0;
            SPI_BTE_I = 0;
            SPI_LOCK_I = 0;
            MISO_MASTER = 0;
            MOSI_SLAVE = 0;
            SS_N_SLAVE = 0;
            SCLK_SLAVE = 0;
            CLK_I = 0;
            RST_I = 0;
             #5 RST_I = 1;
            #10 RST_I = 0;
    end

initial begin
	   #10 CLK_I = 1 ;
	forever
	   #10 CLK_I = ~CLK_I ;		//  this is 50 MHz
	end

initial begin

	   #40 SPI_CYC_I = 1'b1 ;		//  set CYC_I high for duration of tests
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	   #40 SPI_STB_I = 1'b0 ;

	   #38 SPI_ADR_I = 8'b00001100 ;	//  Address to write to the Control register
	    #2 SPI_DAT_I = 8'b10001011 ;	//  Data register - this is what is written to Control register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	   #20 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00010000 ;	//  Address to write the Slave Number
	    #2 SPI_DAT_I = 8'b00000001 ;	//  Data register - this is what is written to SS_N_MASTER
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	   #20 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11011010 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	   #40 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #40 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11110111 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11100111 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11100011 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11000011 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b11000001 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b10000001 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

//	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
//	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	   #38 SPI_ADR_I = 8'b00000100 ;	//  Address to write to the Transmit data register
	    #2 SPI_DAT_I = 8'b10001001 ;	//  Data register - this is what is written to Transmit register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	       SPI_WE_I  = 1'b1 ;		//  set write enable high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low
	       SPI_WE_I  = 1'b0 ;		//  write enable low

	  #100 SPI_ADR_I = 8'b00001000 ;	//  Address to read to the Status register
	       SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	  #100 SPI_STB_I = 1'b1 ;		//  set Strobe signal high
	   #40 SPI_STB_I = 1'b0 ;		//  strobe low

	end


endmodule // spi_tf
